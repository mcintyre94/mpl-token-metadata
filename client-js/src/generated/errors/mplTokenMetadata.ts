/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { MPL_TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';

/** InstructionUnpackError */
export const MPL_TOKEN_METADATA_ERROR__INSTRUCTION_UNPACK_ERROR = 0x0; // 0
/** InstructionPackError */
export const MPL_TOKEN_METADATA_ERROR__INSTRUCTION_PACK_ERROR = 0x1; // 1
/** NotRentExempt: Lamport balance below rent-exempt threshold */
export const MPL_TOKEN_METADATA_ERROR__NOT_RENT_EXEMPT = 0x2; // 2
/** AlreadyInitialized: Already initialized */
export const MPL_TOKEN_METADATA_ERROR__ALREADY_INITIALIZED = 0x3; // 3
/** Uninitialized: Uninitialized */
export const MPL_TOKEN_METADATA_ERROR__UNINITIALIZED = 0x4; // 4
/** InvalidMetadataKey:  Metadata's key must match seed of ['metadata', program id, mint] provided */
export const MPL_TOKEN_METADATA_ERROR__INVALID_METADATA_KEY = 0x5; // 5
/** InvalidEditionKey: Edition's key must match seed of ['metadata', program id, name, 'edition'] provided */
export const MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_KEY = 0x6; // 6
/** UpdateAuthorityIncorrect: Update Authority given does not match */
export const MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_INCORRECT = 0x7; // 7
/** UpdateAuthorityIsNotSigner: Update Authority needs to be signer to update metadata */
export const MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_IS_NOT_SIGNER = 0x8; // 8
/** NotMintAuthority: You must be the mint authority and signer on this transaction */
export const MPL_TOKEN_METADATA_ERROR__NOT_MINT_AUTHORITY = 0x9; // 9
/** InvalidMintAuthority: Mint authority provided does not match the authority on the mint */
export const MPL_TOKEN_METADATA_ERROR__INVALID_MINT_AUTHORITY = 0xa; // 10
/** NameTooLong: Name too long */
export const MPL_TOKEN_METADATA_ERROR__NAME_TOO_LONG = 0xb; // 11
/** SymbolTooLong: Symbol too long */
export const MPL_TOKEN_METADATA_ERROR__SYMBOL_TOO_LONG = 0xc; // 12
/** UriTooLong: URI too long */
export const MPL_TOKEN_METADATA_ERROR__URI_TOO_LONG = 0xd; // 13
/** UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner */
export const MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_MUST_BE_EQUAL_TO_METADATA_AUTHORITY_AND_SIGNER = 0xe; // 14
/** MintMismatch: Mint given does not match mint on Metadata */
export const MPL_TOKEN_METADATA_ERROR__MINT_MISMATCH = 0xf; // 15
/** EditionsMustHaveExactlyOneToken: Editions must have exactly one token */
export const MPL_TOKEN_METADATA_ERROR__EDITIONS_MUST_HAVE_EXACTLY_ONE_TOKEN = 0x10; // 16
/** MaxEditionsMintedAlready */
export const MPL_TOKEN_METADATA_ERROR__MAX_EDITIONS_MINTED_ALREADY = 0x11; // 17
/** TokenMintToFailed */
export const MPL_TOKEN_METADATA_ERROR__TOKEN_MINT_TO_FAILED = 0x12; // 18
/** MasterRecordMismatch */
export const MPL_TOKEN_METADATA_ERROR__MASTER_RECORD_MISMATCH = 0x13; // 19
/** DestinationMintMismatch */
export const MPL_TOKEN_METADATA_ERROR__DESTINATION_MINT_MISMATCH = 0x14; // 20
/** EditionAlreadyMinted */
export const MPL_TOKEN_METADATA_ERROR__EDITION_ALREADY_MINTED = 0x15; // 21
/** PrintingMintDecimalsShouldBeZero */
export const MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_DECIMALS_SHOULD_BE_ZERO = 0x16; // 22
/** OneTimePrintingAuthorizationMintDecimalsShouldBeZero */
export const MPL_TOKEN_METADATA_ERROR__ONE_TIME_PRINTING_AUTHORIZATION_MINT_DECIMALS_SHOULD_BE_ZERO = 0x17; // 23
/** EditionMintDecimalsShouldBeZero: EditionMintDecimalsShouldBeZero */
export const MPL_TOKEN_METADATA_ERROR__EDITION_MINT_DECIMALS_SHOULD_BE_ZERO = 0x18; // 24
/** TokenBurnFailed */
export const MPL_TOKEN_METADATA_ERROR__TOKEN_BURN_FAILED = 0x19; // 25
/** TokenAccountOneTimeAuthMintMismatch */
export const MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_ONE_TIME_AUTH_MINT_MISMATCH = 0x1a; // 26
/** DerivedKeyInvalid: Derived key invalid */
export const MPL_TOKEN_METADATA_ERROR__DERIVED_KEY_INVALID = 0x1b; // 27
/** PrintingMintMismatch: The Printing mint does not match that on the master edition! */
export const MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_MISMATCH = 0x1c; // 28
/** OneTimePrintingAuthMintMismatch: The One Time Printing Auth mint does not match that on the master edition! */
export const MPL_TOKEN_METADATA_ERROR__ONE_TIME_PRINTING_AUTH_MINT_MISMATCH = 0x1d; // 29
/** TokenAccountMintMismatch: The mint of the token account does not match the Printing mint! */
export const MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH = 0x1e; // 30
/** TokenAccountMintMismatchV2: The mint of the token account does not match the master metadata mint! */
export const MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH_V2 = 0x1f; // 31
/** NotEnoughTokens: Not enough tokens to mint a limited edition */
export const MPL_TOKEN_METADATA_ERROR__NOT_ENOUGH_TOKENS = 0x20; // 32
/** PrintingMintAuthorizationAccountMismatch */
export const MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_AUTHORIZATION_ACCOUNT_MISMATCH = 0x21; // 33
/** AuthorizationTokenAccountOwnerMismatch */
export const MPL_TOKEN_METADATA_ERROR__AUTHORIZATION_TOKEN_ACCOUNT_OWNER_MISMATCH = 0x22; // 34
/** Disabled */
export const MPL_TOKEN_METADATA_ERROR__DISABLED = 0x23; // 35
/** CreatorsTooLong: Creators list too long */
export const MPL_TOKEN_METADATA_ERROR__CREATORS_TOO_LONG = 0x24; // 36
/** CreatorsMustBeAtleastOne: Creators must be at least one if set */
export const MPL_TOKEN_METADATA_ERROR__CREATORS_MUST_BE_ATLEAST_ONE = 0x25; // 37
/** MustBeOneOfCreators */
export const MPL_TOKEN_METADATA_ERROR__MUST_BE_ONE_OF_CREATORS = 0x26; // 38
/** NoCreatorsPresentOnMetadata: This metadata does not have creators */
export const MPL_TOKEN_METADATA_ERROR__NO_CREATORS_PRESENT_ON_METADATA = 0x27; // 39
/** CreatorNotFound: This creator address was not found */
export const MPL_TOKEN_METADATA_ERROR__CREATOR_NOT_FOUND = 0x28; // 40
/** InvalidBasisPoints: Basis points cannot be more than 10000 */
export const MPL_TOKEN_METADATA_ERROR__INVALID_BASIS_POINTS = 0x29; // 41
/** PrimarySaleCanOnlyBeFlippedToTrue: Primary sale can only be flipped to true and is immutable */
export const MPL_TOKEN_METADATA_ERROR__PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE = 0x2a; // 42
/** OwnerMismatch: Owner does not match that on the account given */
export const MPL_TOKEN_METADATA_ERROR__OWNER_MISMATCH = 0x2b; // 43
/** NoBalanceInAccountForAuthorization: This account has no tokens to be used for authorization */
export const MPL_TOKEN_METADATA_ERROR__NO_BALANCE_IN_ACCOUNT_FOR_AUTHORIZATION = 0x2c; // 44
/** ShareTotalMustBe100: Share total must equal 100 for creator array */
export const MPL_TOKEN_METADATA_ERROR__SHARE_TOTAL_MUST_BE100 = 0x2d; // 45
/** ReservationExists */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_EXISTS = 0x2e; // 46
/** ReservationDoesNotExist */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_DOES_NOT_EXIST = 0x2f; // 47
/** ReservationNotSet */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_NOT_SET = 0x30; // 48
/** ReservationAlreadyMade */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_ALREADY_MADE = 0x31; // 49
/** BeyondMaxAddressSize */
export const MPL_TOKEN_METADATA_ERROR__BEYOND_MAX_ADDRESS_SIZE = 0x32; // 50
/** NumericalOverflowError: NumericalOverflowError */
export const MPL_TOKEN_METADATA_ERROR__NUMERICAL_OVERFLOW_ERROR = 0x33; // 51
/** ReservationBreachesMaximumSupply */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_BREACHES_MAXIMUM_SUPPLY = 0x34; // 52
/** AddressNotInReservation */
export const MPL_TOKEN_METADATA_ERROR__ADDRESS_NOT_IN_RESERVATION = 0x35; // 53
/** CannotVerifyAnotherCreator: You cannot unilaterally verify another creator, they must sign */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_VERIFY_ANOTHER_CREATOR = 0x36; // 54
/** CannotUnverifyAnotherCreator: You cannot unilaterally unverify another creator */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_UNVERIFY_ANOTHER_CREATOR = 0x37; // 55
/** SpotMismatch */
export const MPL_TOKEN_METADATA_ERROR__SPOT_MISMATCH = 0x38; // 56
/** IncorrectOwner: Incorrect account owner */
export const MPL_TOKEN_METADATA_ERROR__INCORRECT_OWNER = 0x39; // 57
/** PrintingWouldBreachMaximumSupply */
export const MPL_TOKEN_METADATA_ERROR__PRINTING_WOULD_BREACH_MAXIMUM_SUPPLY = 0x3a; // 58
/** DataIsImmutable: Data is immutable */
export const MPL_TOKEN_METADATA_ERROR__DATA_IS_IMMUTABLE = 0x3b; // 59
/** DuplicateCreatorAddress: No duplicate creator addresses */
export const MPL_TOKEN_METADATA_ERROR__DUPLICATE_CREATOR_ADDRESS = 0x3c; // 60
/** ReservationSpotsRemainingShouldMatchTotalSpotsAtStart */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_SPOTS_REMAINING_SHOULD_MATCH_TOTAL_SPOTS_AT_START = 0x3d; // 61
/** InvalidTokenProgram: Invalid token program */
export const MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_PROGRAM = 0x3e; // 62
/** DataTypeMismatch: Data type mismatch */
export const MPL_TOKEN_METADATA_ERROR__DATA_TYPE_MISMATCH = 0x3f; // 63
/** BeyondAlottedAddressSize */
export const MPL_TOKEN_METADATA_ERROR__BEYOND_ALOTTED_ADDRESS_SIZE = 0x40; // 64
/** ReservationNotComplete */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_NOT_COMPLETE = 0x41; // 65
/** TriedToReplaceAnExistingReservation */
export const MPL_TOKEN_METADATA_ERROR__TRIED_TO_REPLACE_AN_EXISTING_RESERVATION = 0x42; // 66
/** InvalidOperation: Invalid operation */
export const MPL_TOKEN_METADATA_ERROR__INVALID_OPERATION = 0x43; // 67
/** InvalidOwner: Invalid Owner */
export const MPL_TOKEN_METADATA_ERROR__INVALID_OWNER = 0x44; // 68
/** PrintingMintSupplyMustBeZeroForConversion: Printing mint supply must be zero for conversion */
export const MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION = 0x45; // 69
/** OneTimeAuthMintSupplyMustBeZeroForConversion: One Time Auth mint supply must be zero for conversion */
export const MPL_TOKEN_METADATA_ERROR__ONE_TIME_AUTH_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION = 0x46; // 70
/** InvalidEditionIndex: You tried to insert one edition too many into an edition mark pda */
export const MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_INDEX = 0x47; // 71
/** ReservationArrayShouldBeSizeOne */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_ARRAY_SHOULD_BE_SIZE_ONE = 0x48; // 72
/** IsMutableCanOnlyBeFlippedToFalse: Is Mutable can only be flipped to false */
export const MPL_TOKEN_METADATA_ERROR__IS_MUTABLE_CAN_ONLY_BE_FLIPPED_TO_FALSE = 0x49; // 73
/** CollectionCannotBeVerifiedInThisInstruction: Collection cannot be verified in this instruction */
export const MPL_TOKEN_METADATA_ERROR__COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION = 0x4a; // 74
/** Removed: This instruction was deprecated in a previous release and is now removed */
export const MPL_TOKEN_METADATA_ERROR__REMOVED = 0x4b; // 75
/** MustBeBurned */
export const MPL_TOKEN_METADATA_ERROR__MUST_BE_BURNED = 0x4c; // 76
/** InvalidUseMethod: This use method is invalid */
export const MPL_TOKEN_METADATA_ERROR__INVALID_USE_METHOD = 0x4d; // 77
/** CannotChangeUseMethodAfterFirstUse: Cannot Change Use Method after the first use */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_CHANGE_USE_METHOD_AFTER_FIRST_USE = 0x4e; // 78
/** CannotChangeUsesAfterFirstUse: Cannot Change Remaining or Available uses after the first use */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_CHANGE_USES_AFTER_FIRST_USE = 0x4f; // 79
/** CollectionNotFound: Collection Not Found on Metadata */
export const MPL_TOKEN_METADATA_ERROR__COLLECTION_NOT_FOUND = 0x50; // 80
/** InvalidCollectionUpdateAuthority: Collection Update Authority is invalid */
export const MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_UPDATE_AUTHORITY = 0x51; // 81
/** CollectionMustBeAUniqueMasterEdition: Collection Must Be a Unique Master Edition v2 */
export const MPL_TOKEN_METADATA_ERROR__COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION = 0x52; // 82
/** UseAuthorityRecordAlreadyExists: The Use Authority Record Already Exists, to modify it Revoke, then Approve */
export const MPL_TOKEN_METADATA_ERROR__USE_AUTHORITY_RECORD_ALREADY_EXISTS = 0x53; // 83
/** UseAuthorityRecordAlreadyRevoked: The Use Authority Record is empty or already revoked */
export const MPL_TOKEN_METADATA_ERROR__USE_AUTHORITY_RECORD_ALREADY_REVOKED = 0x54; // 84
/** Unusable: This token has no uses */
export const MPL_TOKEN_METADATA_ERROR__UNUSABLE = 0x55; // 85
/** NotEnoughUses: There are not enough Uses left on this token. */
export const MPL_TOKEN_METADATA_ERROR__NOT_ENOUGH_USES = 0x56; // 86
/** CollectionAuthorityRecordAlreadyExists: This Collection Authority Record Already Exists. */
export const MPL_TOKEN_METADATA_ERROR__COLLECTION_AUTHORITY_RECORD_ALREADY_EXISTS = 0x57; // 87
/** CollectionAuthorityDoesNotExist: This Collection Authority Record Does Not Exist. */
export const MPL_TOKEN_METADATA_ERROR__COLLECTION_AUTHORITY_DOES_NOT_EXIST = 0x58; // 88
/** InvalidUseAuthorityRecord: This Use Authority Record is invalid. */
export const MPL_TOKEN_METADATA_ERROR__INVALID_USE_AUTHORITY_RECORD = 0x59; // 89
/** InvalidCollectionAuthorityRecord */
export const MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_AUTHORITY_RECORD = 0x5a; // 90
/** InvalidFreezeAuthority: Metadata does not match the freeze authority on the mint */
export const MPL_TOKEN_METADATA_ERROR__INVALID_FREEZE_AUTHORITY = 0x5b; // 91
/** InvalidDelegate: All tokens in this account have not been delegated to this user. */
export const MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE = 0x5c; // 92
/** CannotAdjustVerifiedCreator */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_ADJUST_VERIFIED_CREATOR = 0x5d; // 93
/** CannotRemoveVerifiedCreator: Verified creators cannot be removed. */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_REMOVE_VERIFIED_CREATOR = 0x5e; // 94
/** CannotWipeVerifiedCreators */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_WIPE_VERIFIED_CREATORS = 0x5f; // 95
/** NotAllowedToChangeSellerFeeBasisPoints */
export const MPL_TOKEN_METADATA_ERROR__NOT_ALLOWED_TO_CHANGE_SELLER_FEE_BASIS_POINTS = 0x60; // 96
/** EditionOverrideCannotBeZero: Edition override cannot be zero */
export const MPL_TOKEN_METADATA_ERROR__EDITION_OVERRIDE_CANNOT_BE_ZERO = 0x61; // 97
/** InvalidUser: Invalid User */
export const MPL_TOKEN_METADATA_ERROR__INVALID_USER = 0x62; // 98
/** RevokeCollectionAuthoritySignerIncorrect: Revoke Collection Authority signer is incorrect */
export const MPL_TOKEN_METADATA_ERROR__REVOKE_COLLECTION_AUTHORITY_SIGNER_INCORRECT = 0x63; // 99
/** TokenCloseFailed */
export const MPL_TOKEN_METADATA_ERROR__TOKEN_CLOSE_FAILED = 0x64; // 100
/** UnsizedCollection: Can't use this function on unsized collection */
export const MPL_TOKEN_METADATA_ERROR__UNSIZED_COLLECTION = 0x65; // 101
/** SizedCollection: Can't use this function on a sized collection */
export const MPL_TOKEN_METADATA_ERROR__SIZED_COLLECTION = 0x66; // 102
/** MissingCollectionMetadata: Missing collection metadata account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_METADATA = 0x67; // 103
/** NotAMemberOfCollection: This NFT is not a member of the specified collection. */
export const MPL_TOKEN_METADATA_ERROR__NOT_A_MEMBER_OF_COLLECTION = 0x68; // 104
/** NotVerifiedMemberOfCollection: This NFT is not a verified member of the specified collection. */
export const MPL_TOKEN_METADATA_ERROR__NOT_VERIFIED_MEMBER_OF_COLLECTION = 0x69; // 105
/** NotACollectionParent: This NFT is not a collection parent NFT. */
export const MPL_TOKEN_METADATA_ERROR__NOT_A_COLLECTION_PARENT = 0x6a; // 106
/** CouldNotDetermineTokenStandard: Could not determine a TokenStandard type. */
export const MPL_TOKEN_METADATA_ERROR__COULD_NOT_DETERMINE_TOKEN_STANDARD = 0x6b; // 107
/** MissingEditionAccount: This mint account has an edition but none was provided. */
export const MPL_TOKEN_METADATA_ERROR__MISSING_EDITION_ACCOUNT = 0x6c; // 108
/** NotAMasterEdition: This edition is not a Master Edition */
export const MPL_TOKEN_METADATA_ERROR__NOT_A_MASTER_EDITION = 0x6d; // 109
/** MasterEditionHasPrints: This Master Edition has existing prints */
export const MPL_TOKEN_METADATA_ERROR__MASTER_EDITION_HAS_PRINTS = 0x6e; // 110
/** BorshDeserializationError */
export const MPL_TOKEN_METADATA_ERROR__BORSH_DESERIALIZATION_ERROR = 0x6f; // 111
/** CannotUpdateVerifiedCollection: Cannot update a verified collection in this command */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_UPDATE_VERIFIED_COLLECTION = 0x70; // 112
/** CollectionMasterEditionAccountInvalid: Edition account doesnt match collection  */
export const MPL_TOKEN_METADATA_ERROR__COLLECTION_MASTER_EDITION_ACCOUNT_INVALID = 0x71; // 113
/** AlreadyVerified: Item is already verified. */
export const MPL_TOKEN_METADATA_ERROR__ALREADY_VERIFIED = 0x72; // 114
/** AlreadyUnverified */
export const MPL_TOKEN_METADATA_ERROR__ALREADY_UNVERIFIED = 0x73; // 115
/** NotAPrintEdition: This edition is not a Print Edition */
export const MPL_TOKEN_METADATA_ERROR__NOT_A_PRINT_EDITION = 0x74; // 116
/** InvalidMasterEdition: Invalid Master Edition */
export const MPL_TOKEN_METADATA_ERROR__INVALID_MASTER_EDITION = 0x75; // 117
/** InvalidPrintEdition: Invalid Print Edition */
export const MPL_TOKEN_METADATA_ERROR__INVALID_PRINT_EDITION = 0x76; // 118
/** InvalidEditionMarker: Invalid Edition Marker */
export const MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_MARKER = 0x77; // 119
/** ReservationListDeprecated: Reservation List is Deprecated */
export const MPL_TOKEN_METADATA_ERROR__RESERVATION_LIST_DEPRECATED = 0x78; // 120
/** PrintEditionDoesNotMatchMasterEdition: Print Edition does not match Master Edition */
export const MPL_TOKEN_METADATA_ERROR__PRINT_EDITION_DOES_NOT_MATCH_MASTER_EDITION = 0x79; // 121
/** EditionNumberGreaterThanMaxSupply: Edition Number greater than max supply */
export const MPL_TOKEN_METADATA_ERROR__EDITION_NUMBER_GREATER_THAN_MAX_SUPPLY = 0x7a; // 122
/** MustUnverify: Must unverify before migrating collections. */
export const MPL_TOKEN_METADATA_ERROR__MUST_UNVERIFY = 0x7b; // 123
/** InvalidEscrowBumpSeed: Invalid Escrow Account Bump Seed */
export const MPL_TOKEN_METADATA_ERROR__INVALID_ESCROW_BUMP_SEED = 0x7c; // 124
/** MustBeEscrowAuthority: Must Escrow Authority */
export const MPL_TOKEN_METADATA_ERROR__MUST_BE_ESCROW_AUTHORITY = 0x7d; // 125
/** InvalidSystemProgram: Invalid System Program */
export const MPL_TOKEN_METADATA_ERROR__INVALID_SYSTEM_PROGRAM = 0x7e; // 126
/** MustBeNonFungible: Must be a Non Fungible Token */
export const MPL_TOKEN_METADATA_ERROR__MUST_BE_NON_FUNGIBLE = 0x7f; // 127
/** InsufficientTokens: Insufficient tokens for transfer */
export const MPL_TOKEN_METADATA_ERROR__INSUFFICIENT_TOKENS = 0x80; // 128
/** BorshSerializationError: Borsh Serialization Error */
export const MPL_TOKEN_METADATA_ERROR__BORSH_SERIALIZATION_ERROR = 0x81; // 129
/** NoFreezeAuthoritySet: Cannot create NFT with no Freeze Authority. */
export const MPL_TOKEN_METADATA_ERROR__NO_FREEZE_AUTHORITY_SET = 0x82; // 130
/** InvalidCollectionSizeChange: Invalid collection size change */
export const MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_SIZE_CHANGE = 0x83; // 131
/** InvalidBubblegumSigner: Invalid bubblegum signer */
export const MPL_TOKEN_METADATA_ERROR__INVALID_BUBBLEGUM_SIGNER = 0x84; // 132
/** EscrowParentHasDelegate: Escrow parent cannot have a delegate */
export const MPL_TOKEN_METADATA_ERROR__ESCROW_PARENT_HAS_DELEGATE = 0x85; // 133
/** MintIsNotSigner: Mint needs to be signer to initialize the account */
export const MPL_TOKEN_METADATA_ERROR__MINT_IS_NOT_SIGNER = 0x86; // 134
/** InvalidTokenStandard: Invalid token standard */
export const MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_STANDARD = 0x87; // 135
/** InvalidMintForTokenStandard: Invalid mint account for specified token standard */
export const MPL_TOKEN_METADATA_ERROR__INVALID_MINT_FOR_TOKEN_STANDARD = 0x88; // 136
/** InvalidAuthorizationRules: Invalid authorization rules account */
export const MPL_TOKEN_METADATA_ERROR__INVALID_AUTHORIZATION_RULES = 0x89; // 137
/** MissingAuthorizationRules: Missing authorization rules account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_AUTHORIZATION_RULES = 0x8a; // 138
/** MissingProgrammableConfig: Missing programmable configuration */
export const MPL_TOKEN_METADATA_ERROR__MISSING_PROGRAMMABLE_CONFIG = 0x8b; // 139
/** InvalidProgrammableConfig: Invalid programmable configuration */
export const MPL_TOKEN_METADATA_ERROR__INVALID_PROGRAMMABLE_CONFIG = 0x8c; // 140
/** DelegateAlreadyExists: Delegate already exists */
export const MPL_TOKEN_METADATA_ERROR__DELEGATE_ALREADY_EXISTS = 0x8d; // 141
/** DelegateNotFound: Delegate not found */
export const MPL_TOKEN_METADATA_ERROR__DELEGATE_NOT_FOUND = 0x8e; // 142
/** MissingAccountInBuilder: Required account not set in instruction builder */
export const MPL_TOKEN_METADATA_ERROR__MISSING_ACCOUNT_IN_BUILDER = 0x8f; // 143
/** MissingArgumentInBuilder: Required argument not set in instruction builder */
export const MPL_TOKEN_METADATA_ERROR__MISSING_ARGUMENT_IN_BUILDER = 0x90; // 144
/** FeatureNotSupported: Feature not supported currently */
export const MPL_TOKEN_METADATA_ERROR__FEATURE_NOT_SUPPORTED = 0x91; // 145
/** InvalidSystemWallet: Invalid system wallet */
export const MPL_TOKEN_METADATA_ERROR__INVALID_SYSTEM_WALLET = 0x92; // 146
/** OnlySaleDelegateCanTransfer: Only the sale delegate can transfer while its set */
export const MPL_TOKEN_METADATA_ERROR__ONLY_SALE_DELEGATE_CAN_TRANSFER = 0x93; // 147
/** MissingTokenAccount: Missing token account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_ACCOUNT = 0x94; // 148
/** MissingSplTokenProgram: Missing SPL token program */
export const MPL_TOKEN_METADATA_ERROR__MISSING_SPL_TOKEN_PROGRAM = 0x95; // 149
/** MissingAuthorizationRulesProgram: Missing authorization rules program */
export const MPL_TOKEN_METADATA_ERROR__MISSING_AUTHORIZATION_RULES_PROGRAM = 0x96; // 150
/** InvalidDelegateRoleForTransfer: Invalid delegate role for transfer */
export const MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ROLE_FOR_TRANSFER = 0x97; // 151
/** InvalidTransferAuthority: Invalid transfer authority */
export const MPL_TOKEN_METADATA_ERROR__INVALID_TRANSFER_AUTHORITY = 0x98; // 152
/** InstructionNotSupported: Instruction not supported for ProgrammableNonFungible assets */
export const MPL_TOKEN_METADATA_ERROR__INSTRUCTION_NOT_SUPPORTED = 0x99; // 153
/** KeyMismatch: Public key does not match expected value */
export const MPL_TOKEN_METADATA_ERROR__KEY_MISMATCH = 0x9a; // 154
/** LockedToken: Token is locked */
export const MPL_TOKEN_METADATA_ERROR__LOCKED_TOKEN = 0x9b; // 155
/** UnlockedToken: Token is unlocked */
export const MPL_TOKEN_METADATA_ERROR__UNLOCKED_TOKEN = 0x9c; // 156
/** MissingDelegateRole: Missing delegate role */
export const MPL_TOKEN_METADATA_ERROR__MISSING_DELEGATE_ROLE = 0x9d; // 157
/** InvalidAuthorityType: Invalid authority type */
export const MPL_TOKEN_METADATA_ERROR__INVALID_AUTHORITY_TYPE = 0x9e; // 158
/** MissingTokenRecord: Missing token record account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_RECORD = 0x9f; // 159
/** MintSupplyMustBeZero: Mint supply must be zero for programmable assets */
export const MPL_TOKEN_METADATA_ERROR__MINT_SUPPLY_MUST_BE_ZERO = 0xa0; // 160
/** DataIsEmptyOrZeroed: Data is empty or zeroed */
export const MPL_TOKEN_METADATA_ERROR__DATA_IS_EMPTY_OR_ZEROED = 0xa1; // 161
/** MissingTokenOwnerAccount: Missing token owner */
export const MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_OWNER_ACCOUNT = 0xa2; // 162
/** InvalidMasterEditionAccountLength: Master edition account has an invalid length */
export const MPL_TOKEN_METADATA_ERROR__INVALID_MASTER_EDITION_ACCOUNT_LENGTH = 0xa3; // 163
/** IncorrectTokenState: Incorrect token state */
export const MPL_TOKEN_METADATA_ERROR__INCORRECT_TOKEN_STATE = 0xa4; // 164
/** InvalidDelegateRole: Invalid delegate role */
export const MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ROLE = 0xa5; // 165
/** MissingPrintSupply: Print supply is required for non-fungibles */
export const MPL_TOKEN_METADATA_ERROR__MISSING_PRINT_SUPPLY = 0xa6; // 166
/** MissingMasterEditionAccount: Missing master edition account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_ACCOUNT = 0xa7; // 167
/** AmountMustBeGreaterThanZero: Amount must be greater than zero */
export const MPL_TOKEN_METADATA_ERROR__AMOUNT_MUST_BE_GREATER_THAN_ZERO = 0xa8; // 168
/** InvalidDelegateArgs: Invalid delegate args */
export const MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ARGS = 0xa9; // 169
/** MissingLockedTransferAddress: Missing address for locked transfer */
export const MPL_TOKEN_METADATA_ERROR__MISSING_LOCKED_TRANSFER_ADDRESS = 0xaa; // 170
/** InvalidLockedTransferAddress: Invalid destination address for locked transfer */
export const MPL_TOKEN_METADATA_ERROR__INVALID_LOCKED_TRANSFER_ADDRESS = 0xab; // 171
/** DataIncrementLimitExceeded: Exceeded account realloc increase limit */
export const MPL_TOKEN_METADATA_ERROR__DATA_INCREMENT_LIMIT_EXCEEDED = 0xac; // 172
/** CannotUpdateAssetWithDelegate: Cannot update the rule set of a programmable asset that has a delegate */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_UPDATE_ASSET_WITH_DELEGATE = 0xad; // 173
/** InvalidAmount: Invalid token amount for this operation or token standard */
export const MPL_TOKEN_METADATA_ERROR__INVALID_AMOUNT = 0xae; // 174
/** MissingMasterEditionMintAccount: Missing master edition mint account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_MINT_ACCOUNT = 0xaf; // 175
/** MissingMasterEditionTokenAccount: Missing master edition token account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_TOKEN_ACCOUNT = 0xb0; // 176
/** MissingEditionMarkerAccount: Missing edition marker account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_EDITION_MARKER_ACCOUNT = 0xb1; // 177
/** CannotBurnWithDelegate: Cannot burn while persistent delegate is set */
export const MPL_TOKEN_METADATA_ERROR__CANNOT_BURN_WITH_DELEGATE = 0xb2; // 178
/** MissingEdition: Missing edition account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_EDITION = 0xb3; // 179
/** InvalidAssociatedTokenAccountProgram: Invalid Associated Token Account Program */
export const MPL_TOKEN_METADATA_ERROR__INVALID_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM = 0xb4; // 180
/** InvalidInstructionsSysvar: Invalid InstructionsSysvar */
export const MPL_TOKEN_METADATA_ERROR__INVALID_INSTRUCTIONS_SYSVAR = 0xb5; // 181
/** InvalidParentAccounts: Invalid or Unneeded parent accounts */
export const MPL_TOKEN_METADATA_ERROR__INVALID_PARENT_ACCOUNTS = 0xb6; // 182
/** InvalidUpdateArgs: Authority cannot apply all update args */
export const MPL_TOKEN_METADATA_ERROR__INVALID_UPDATE_ARGS = 0xb7; // 183
/** InsufficientTokenBalance: Token account does not have enough tokens */
export const MPL_TOKEN_METADATA_ERROR__INSUFFICIENT_TOKEN_BALANCE = 0xb8; // 184
/** MissingCollectionMint: Missing collection account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_MINT = 0xb9; // 185
/** MissingCollectionMasterEdition: Missing collection master edition account */
export const MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_MASTER_EDITION = 0xba; // 186
/** InvalidTokenRecord: Invalid token record account */
export const MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_RECORD = 0xbb; // 187
/** InvalidCloseAuthority: The close authority needs to be revoked by the Utility Delegate */
export const MPL_TOKEN_METADATA_ERROR__INVALID_CLOSE_AUTHORITY = 0xbc; // 188
/** InvalidInstruction: Invalid or removed instruction */
export const MPL_TOKEN_METADATA_ERROR__INVALID_INSTRUCTION = 0xbd; // 189
/** MissingDelegateRecord: Missing delegate record */
export const MPL_TOKEN_METADATA_ERROR__MISSING_DELEGATE_RECORD = 0xbe; // 190
/** InvalidFeeAccount */
export const MPL_TOKEN_METADATA_ERROR__INVALID_FEE_ACCOUNT = 0xbf; // 191
/** InvalidMetadataFlags */
export const MPL_TOKEN_METADATA_ERROR__INVALID_METADATA_FLAGS = 0xc0; // 192

export type MplTokenMetadataError =
  | typeof MPL_TOKEN_METADATA_ERROR__ADDRESS_NOT_IN_RESERVATION
  | typeof MPL_TOKEN_METADATA_ERROR__ALREADY_INITIALIZED
  | typeof MPL_TOKEN_METADATA_ERROR__ALREADY_UNVERIFIED
  | typeof MPL_TOKEN_METADATA_ERROR__ALREADY_VERIFIED
  | typeof MPL_TOKEN_METADATA_ERROR__AMOUNT_MUST_BE_GREATER_THAN_ZERO
  | typeof MPL_TOKEN_METADATA_ERROR__AUTHORIZATION_TOKEN_ACCOUNT_OWNER_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__BEYOND_ALOTTED_ADDRESS_SIZE
  | typeof MPL_TOKEN_METADATA_ERROR__BEYOND_MAX_ADDRESS_SIZE
  | typeof MPL_TOKEN_METADATA_ERROR__BORSH_DESERIALIZATION_ERROR
  | typeof MPL_TOKEN_METADATA_ERROR__BORSH_SERIALIZATION_ERROR
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_ADJUST_VERIFIED_CREATOR
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_BURN_WITH_DELEGATE
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_CHANGE_USE_METHOD_AFTER_FIRST_USE
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_CHANGE_USES_AFTER_FIRST_USE
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_REMOVE_VERIFIED_CREATOR
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_UNVERIFY_ANOTHER_CREATOR
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_UPDATE_ASSET_WITH_DELEGATE
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_UPDATE_VERIFIED_COLLECTION
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_VERIFY_ANOTHER_CREATOR
  | typeof MPL_TOKEN_METADATA_ERROR__CANNOT_WIPE_VERIFIED_CREATORS
  | typeof MPL_TOKEN_METADATA_ERROR__COLLECTION_AUTHORITY_DOES_NOT_EXIST
  | typeof MPL_TOKEN_METADATA_ERROR__COLLECTION_AUTHORITY_RECORD_ALREADY_EXISTS
  | typeof MPL_TOKEN_METADATA_ERROR__COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION
  | typeof MPL_TOKEN_METADATA_ERROR__COLLECTION_MASTER_EDITION_ACCOUNT_INVALID
  | typeof MPL_TOKEN_METADATA_ERROR__COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__COLLECTION_NOT_FOUND
  | typeof MPL_TOKEN_METADATA_ERROR__COULD_NOT_DETERMINE_TOKEN_STANDARD
  | typeof MPL_TOKEN_METADATA_ERROR__CREATOR_NOT_FOUND
  | typeof MPL_TOKEN_METADATA_ERROR__CREATORS_MUST_BE_ATLEAST_ONE
  | typeof MPL_TOKEN_METADATA_ERROR__CREATORS_TOO_LONG
  | typeof MPL_TOKEN_METADATA_ERROR__DATA_INCREMENT_LIMIT_EXCEEDED
  | typeof MPL_TOKEN_METADATA_ERROR__DATA_IS_EMPTY_OR_ZEROED
  | typeof MPL_TOKEN_METADATA_ERROR__DATA_IS_IMMUTABLE
  | typeof MPL_TOKEN_METADATA_ERROR__DATA_TYPE_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__DELEGATE_ALREADY_EXISTS
  | typeof MPL_TOKEN_METADATA_ERROR__DELEGATE_NOT_FOUND
  | typeof MPL_TOKEN_METADATA_ERROR__DERIVED_KEY_INVALID
  | typeof MPL_TOKEN_METADATA_ERROR__DESTINATION_MINT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__DISABLED
  | typeof MPL_TOKEN_METADATA_ERROR__DUPLICATE_CREATOR_ADDRESS
  | typeof MPL_TOKEN_METADATA_ERROR__EDITION_ALREADY_MINTED
  | typeof MPL_TOKEN_METADATA_ERROR__EDITION_MINT_DECIMALS_SHOULD_BE_ZERO
  | typeof MPL_TOKEN_METADATA_ERROR__EDITION_NUMBER_GREATER_THAN_MAX_SUPPLY
  | typeof MPL_TOKEN_METADATA_ERROR__EDITION_OVERRIDE_CANNOT_BE_ZERO
  | typeof MPL_TOKEN_METADATA_ERROR__EDITIONS_MUST_HAVE_EXACTLY_ONE_TOKEN
  | typeof MPL_TOKEN_METADATA_ERROR__ESCROW_PARENT_HAS_DELEGATE
  | typeof MPL_TOKEN_METADATA_ERROR__FEATURE_NOT_SUPPORTED
  | typeof MPL_TOKEN_METADATA_ERROR__INCORRECT_OWNER
  | typeof MPL_TOKEN_METADATA_ERROR__INCORRECT_TOKEN_STATE
  | typeof MPL_TOKEN_METADATA_ERROR__INSTRUCTION_NOT_SUPPORTED
  | typeof MPL_TOKEN_METADATA_ERROR__INSTRUCTION_PACK_ERROR
  | typeof MPL_TOKEN_METADATA_ERROR__INSTRUCTION_UNPACK_ERROR
  | typeof MPL_TOKEN_METADATA_ERROR__INSUFFICIENT_TOKEN_BALANCE
  | typeof MPL_TOKEN_METADATA_ERROR__INSUFFICIENT_TOKENS
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_AMOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_AUTHORITY_TYPE
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_AUTHORIZATION_RULES
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_BASIS_POINTS
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_BUBBLEGUM_SIGNER
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_CLOSE_AUTHORITY
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_AUTHORITY_RECORD
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_SIZE_CHANGE
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_UPDATE_AUTHORITY
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ARGS
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ROLE
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ROLE_FOR_TRANSFER
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_INDEX
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_KEY
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_MARKER
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_ESCROW_BUMP_SEED
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_FEE_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_FREEZE_AUTHORITY
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_INSTRUCTION
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_INSTRUCTIONS_SYSVAR
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_LOCKED_TRANSFER_ADDRESS
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_MASTER_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_MASTER_EDITION_ACCOUNT_LENGTH
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_METADATA_FLAGS
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_METADATA_KEY
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_MINT_AUTHORITY
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_MINT_FOR_TOKEN_STANDARD
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_OPERATION
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_OWNER
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_PARENT_ACCOUNTS
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_PRINT_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_PROGRAMMABLE_CONFIG
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_SYSTEM_PROGRAM
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_SYSTEM_WALLET
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_PROGRAM
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_RECORD
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_STANDARD
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_TRANSFER_AUTHORITY
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_UPDATE_ARGS
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_USE_AUTHORITY_RECORD
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_USE_METHOD
  | typeof MPL_TOKEN_METADATA_ERROR__INVALID_USER
  | typeof MPL_TOKEN_METADATA_ERROR__IS_MUTABLE_CAN_ONLY_BE_FLIPPED_TO_FALSE
  | typeof MPL_TOKEN_METADATA_ERROR__KEY_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__LOCKED_TOKEN
  | typeof MPL_TOKEN_METADATA_ERROR__MASTER_EDITION_HAS_PRINTS
  | typeof MPL_TOKEN_METADATA_ERROR__MASTER_RECORD_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__MAX_EDITIONS_MINTED_ALREADY
  | typeof MPL_TOKEN_METADATA_ERROR__MINT_IS_NOT_SIGNER
  | typeof MPL_TOKEN_METADATA_ERROR__MINT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__MINT_SUPPLY_MUST_BE_ZERO
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_ACCOUNT_IN_BUILDER
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_ARGUMENT_IN_BUILDER
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_AUTHORIZATION_RULES
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_AUTHORIZATION_RULES_PROGRAM
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_MASTER_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_METADATA
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_MINT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_DELEGATE_RECORD
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_DELEGATE_ROLE
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_EDITION_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_EDITION_MARKER_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_LOCKED_TRANSFER_ADDRESS
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_MINT_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_TOKEN_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_PRINT_SUPPLY
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_PROGRAMMABLE_CONFIG
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_SPL_TOKEN_PROGRAM
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_OWNER_ACCOUNT
  | typeof MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_RECORD
  | typeof MPL_TOKEN_METADATA_ERROR__MUST_BE_BURNED
  | typeof MPL_TOKEN_METADATA_ERROR__MUST_BE_ESCROW_AUTHORITY
  | typeof MPL_TOKEN_METADATA_ERROR__MUST_BE_NON_FUNGIBLE
  | typeof MPL_TOKEN_METADATA_ERROR__MUST_BE_ONE_OF_CREATORS
  | typeof MPL_TOKEN_METADATA_ERROR__MUST_UNVERIFY
  | typeof MPL_TOKEN_METADATA_ERROR__NAME_TOO_LONG
  | typeof MPL_TOKEN_METADATA_ERROR__NO_BALANCE_IN_ACCOUNT_FOR_AUTHORIZATION
  | typeof MPL_TOKEN_METADATA_ERROR__NO_CREATORS_PRESENT_ON_METADATA
  | typeof MPL_TOKEN_METADATA_ERROR__NO_FREEZE_AUTHORITY_SET
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_A_COLLECTION_PARENT
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_ALLOWED_TO_CHANGE_SELLER_FEE_BASIS_POINTS
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_A_MASTER_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_A_MEMBER_OF_COLLECTION
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_A_PRINT_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_ENOUGH_TOKENS
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_ENOUGH_USES
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_MINT_AUTHORITY
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_RENT_EXEMPT
  | typeof MPL_TOKEN_METADATA_ERROR__NOT_VERIFIED_MEMBER_OF_COLLECTION
  | typeof MPL_TOKEN_METADATA_ERROR__NUMERICAL_OVERFLOW_ERROR
  | typeof MPL_TOKEN_METADATA_ERROR__ONE_TIME_AUTH_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION
  | typeof MPL_TOKEN_METADATA_ERROR__ONE_TIME_PRINTING_AUTH_MINT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__ONE_TIME_PRINTING_AUTHORIZATION_MINT_DECIMALS_SHOULD_BE_ZERO
  | typeof MPL_TOKEN_METADATA_ERROR__ONLY_SALE_DELEGATE_CAN_TRANSFER
  | typeof MPL_TOKEN_METADATA_ERROR__OWNER_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE
  | typeof MPL_TOKEN_METADATA_ERROR__PRINT_EDITION_DOES_NOT_MATCH_MASTER_EDITION
  | typeof MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_AUTHORIZATION_ACCOUNT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_DECIMALS_SHOULD_BE_ZERO
  | typeof MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION
  | typeof MPL_TOKEN_METADATA_ERROR__PRINTING_WOULD_BREACH_MAXIMUM_SUPPLY
  | typeof MPL_TOKEN_METADATA_ERROR__REMOVED
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_ALREADY_MADE
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_ARRAY_SHOULD_BE_SIZE_ONE
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_BREACHES_MAXIMUM_SUPPLY
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_DOES_NOT_EXIST
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_EXISTS
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_LIST_DEPRECATED
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_NOT_COMPLETE
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_NOT_SET
  | typeof MPL_TOKEN_METADATA_ERROR__RESERVATION_SPOTS_REMAINING_SHOULD_MATCH_TOTAL_SPOTS_AT_START
  | typeof MPL_TOKEN_METADATA_ERROR__REVOKE_COLLECTION_AUTHORITY_SIGNER_INCORRECT
  | typeof MPL_TOKEN_METADATA_ERROR__SHARE_TOTAL_MUST_BE100
  | typeof MPL_TOKEN_METADATA_ERROR__SIZED_COLLECTION
  | typeof MPL_TOKEN_METADATA_ERROR__SPOT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__SYMBOL_TOO_LONG
  | typeof MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH_V2
  | typeof MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_ONE_TIME_AUTH_MINT_MISMATCH
  | typeof MPL_TOKEN_METADATA_ERROR__TOKEN_BURN_FAILED
  | typeof MPL_TOKEN_METADATA_ERROR__TOKEN_CLOSE_FAILED
  | typeof MPL_TOKEN_METADATA_ERROR__TOKEN_MINT_TO_FAILED
  | typeof MPL_TOKEN_METADATA_ERROR__TRIED_TO_REPLACE_AN_EXISTING_RESERVATION
  | typeof MPL_TOKEN_METADATA_ERROR__UNINITIALIZED
  | typeof MPL_TOKEN_METADATA_ERROR__UNLOCKED_TOKEN
  | typeof MPL_TOKEN_METADATA_ERROR__UNSIZED_COLLECTION
  | typeof MPL_TOKEN_METADATA_ERROR__UNUSABLE
  | typeof MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_INCORRECT
  | typeof MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_IS_NOT_SIGNER
  | typeof MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_MUST_BE_EQUAL_TO_METADATA_AUTHORITY_AND_SIGNER
  | typeof MPL_TOKEN_METADATA_ERROR__URI_TOO_LONG
  | typeof MPL_TOKEN_METADATA_ERROR__USE_AUTHORITY_RECORD_ALREADY_EXISTS
  | typeof MPL_TOKEN_METADATA_ERROR__USE_AUTHORITY_RECORD_ALREADY_REVOKED;

let mplTokenMetadataErrorMessages:
  | Record<MplTokenMetadataError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  mplTokenMetadataErrorMessages = {
    [MPL_TOKEN_METADATA_ERROR__ADDRESS_NOT_IN_RESERVATION]: ``,
    [MPL_TOKEN_METADATA_ERROR__ALREADY_INITIALIZED]: `Already initialized`,
    [MPL_TOKEN_METADATA_ERROR__ALREADY_UNVERIFIED]: ``,
    [MPL_TOKEN_METADATA_ERROR__ALREADY_VERIFIED]: `Item is already verified.`,
    [MPL_TOKEN_METADATA_ERROR__AMOUNT_MUST_BE_GREATER_THAN_ZERO]: `Amount must be greater than zero`,
    [MPL_TOKEN_METADATA_ERROR__AUTHORIZATION_TOKEN_ACCOUNT_OWNER_MISMATCH]: ``,
    [MPL_TOKEN_METADATA_ERROR__BEYOND_ALOTTED_ADDRESS_SIZE]: ``,
    [MPL_TOKEN_METADATA_ERROR__BEYOND_MAX_ADDRESS_SIZE]: ``,
    [MPL_TOKEN_METADATA_ERROR__BORSH_DESERIALIZATION_ERROR]: ``,
    [MPL_TOKEN_METADATA_ERROR__BORSH_SERIALIZATION_ERROR]: `Borsh Serialization Error`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_ADJUST_VERIFIED_CREATOR]: ``,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_BURN_WITH_DELEGATE]: `Cannot burn while persistent delegate is set`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_CHANGE_USE_METHOD_AFTER_FIRST_USE]: `Cannot Change Use Method after the first use`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_CHANGE_USES_AFTER_FIRST_USE]: `Cannot Change Remaining or Available uses after the first use`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_REMOVE_VERIFIED_CREATOR]: `Verified creators cannot be removed.`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_UNVERIFY_ANOTHER_CREATOR]: `You cannot unilaterally unverify another creator`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_UPDATE_ASSET_WITH_DELEGATE]: `Cannot update the rule set of a programmable asset that has a delegate`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_UPDATE_VERIFIED_COLLECTION]: `Cannot update a verified collection in this command`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_VERIFY_ANOTHER_CREATOR]: `You cannot unilaterally verify another creator, they must sign`,
    [MPL_TOKEN_METADATA_ERROR__CANNOT_WIPE_VERIFIED_CREATORS]: ``,
    [MPL_TOKEN_METADATA_ERROR__COLLECTION_AUTHORITY_DOES_NOT_EXIST]: `This Collection Authority Record Does Not Exist.`,
    [MPL_TOKEN_METADATA_ERROR__COLLECTION_AUTHORITY_RECORD_ALREADY_EXISTS]: `This Collection Authority Record Already Exists.`,
    [MPL_TOKEN_METADATA_ERROR__COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION]: `Collection cannot be verified in this instruction`,
    [MPL_TOKEN_METADATA_ERROR__COLLECTION_MASTER_EDITION_ACCOUNT_INVALID]: `Edition account doesnt match collection `,
    [MPL_TOKEN_METADATA_ERROR__COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION]: `Collection Must Be a Unique Master Edition v2`,
    [MPL_TOKEN_METADATA_ERROR__COLLECTION_NOT_FOUND]: `Collection Not Found on Metadata`,
    [MPL_TOKEN_METADATA_ERROR__COULD_NOT_DETERMINE_TOKEN_STANDARD]: `Could not determine a TokenStandard type.`,
    [MPL_TOKEN_METADATA_ERROR__CREATOR_NOT_FOUND]: `This creator address was not found`,
    [MPL_TOKEN_METADATA_ERROR__CREATORS_MUST_BE_ATLEAST_ONE]: `Creators must be at least one if set`,
    [MPL_TOKEN_METADATA_ERROR__CREATORS_TOO_LONG]: `Creators list too long`,
    [MPL_TOKEN_METADATA_ERROR__DATA_INCREMENT_LIMIT_EXCEEDED]: `Exceeded account realloc increase limit`,
    [MPL_TOKEN_METADATA_ERROR__DATA_IS_EMPTY_OR_ZEROED]: `Data is empty or zeroed`,
    [MPL_TOKEN_METADATA_ERROR__DATA_IS_IMMUTABLE]: `Data is immutable`,
    [MPL_TOKEN_METADATA_ERROR__DATA_TYPE_MISMATCH]: `Data type mismatch`,
    [MPL_TOKEN_METADATA_ERROR__DELEGATE_ALREADY_EXISTS]: `Delegate already exists`,
    [MPL_TOKEN_METADATA_ERROR__DELEGATE_NOT_FOUND]: `Delegate not found`,
    [MPL_TOKEN_METADATA_ERROR__DERIVED_KEY_INVALID]: `Derived key invalid`,
    [MPL_TOKEN_METADATA_ERROR__DESTINATION_MINT_MISMATCH]: ``,
    [MPL_TOKEN_METADATA_ERROR__DISABLED]: ``,
    [MPL_TOKEN_METADATA_ERROR__DUPLICATE_CREATOR_ADDRESS]: `No duplicate creator addresses`,
    [MPL_TOKEN_METADATA_ERROR__EDITION_ALREADY_MINTED]: ``,
    [MPL_TOKEN_METADATA_ERROR__EDITION_MINT_DECIMALS_SHOULD_BE_ZERO]: `EditionMintDecimalsShouldBeZero`,
    [MPL_TOKEN_METADATA_ERROR__EDITION_NUMBER_GREATER_THAN_MAX_SUPPLY]: `Edition Number greater than max supply`,
    [MPL_TOKEN_METADATA_ERROR__EDITION_OVERRIDE_CANNOT_BE_ZERO]: `Edition override cannot be zero`,
    [MPL_TOKEN_METADATA_ERROR__EDITIONS_MUST_HAVE_EXACTLY_ONE_TOKEN]: `Editions must have exactly one token`,
    [MPL_TOKEN_METADATA_ERROR__ESCROW_PARENT_HAS_DELEGATE]: `Escrow parent cannot have a delegate`,
    [MPL_TOKEN_METADATA_ERROR__FEATURE_NOT_SUPPORTED]: `Feature not supported currently`,
    [MPL_TOKEN_METADATA_ERROR__INCORRECT_OWNER]: `Incorrect account owner`,
    [MPL_TOKEN_METADATA_ERROR__INCORRECT_TOKEN_STATE]: `Incorrect token state`,
    [MPL_TOKEN_METADATA_ERROR__INSTRUCTION_NOT_SUPPORTED]: `Instruction not supported for ProgrammableNonFungible assets`,
    [MPL_TOKEN_METADATA_ERROR__INSTRUCTION_PACK_ERROR]: ``,
    [MPL_TOKEN_METADATA_ERROR__INSTRUCTION_UNPACK_ERROR]: ``,
    [MPL_TOKEN_METADATA_ERROR__INSUFFICIENT_TOKEN_BALANCE]: `Token account does not have enough tokens`,
    [MPL_TOKEN_METADATA_ERROR__INSUFFICIENT_TOKENS]: `Insufficient tokens for transfer`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_AMOUNT]: `Invalid token amount for this operation or token standard`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM]: `Invalid Associated Token Account Program`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_AUTHORITY_TYPE]: `Invalid authority type`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_AUTHORIZATION_RULES]: `Invalid authorization rules account`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_BASIS_POINTS]: `Basis points cannot be more than 10000`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_BUBBLEGUM_SIGNER]: `Invalid bubblegum signer`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_CLOSE_AUTHORITY]: `The close authority needs to be revoked by the Utility Delegate`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_AUTHORITY_RECORD]: ``,
    [MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_SIZE_CHANGE]: `Invalid collection size change`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_COLLECTION_UPDATE_AUTHORITY]: `Collection Update Authority is invalid`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE]: `All tokens in this account have not been delegated to this user.`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ARGS]: `Invalid delegate args`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ROLE]: `Invalid delegate role`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_DELEGATE_ROLE_FOR_TRANSFER]: `Invalid delegate role for transfer`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_INDEX]: `You tried to insert one edition too many into an edition mark pda`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_KEY]: `Edition's key must match seed of ['metadata', program id, name, 'edition'] provided`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_EDITION_MARKER]: `Invalid Edition Marker`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_ESCROW_BUMP_SEED]: `Invalid Escrow Account Bump Seed`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_FEE_ACCOUNT]: ``,
    [MPL_TOKEN_METADATA_ERROR__INVALID_FREEZE_AUTHORITY]: `Metadata does not match the freeze authority on the mint`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_INSTRUCTION]: `Invalid or removed instruction`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_INSTRUCTIONS_SYSVAR]: `Invalid InstructionsSysvar`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_LOCKED_TRANSFER_ADDRESS]: `Invalid destination address for locked transfer`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_MASTER_EDITION]: `Invalid Master Edition`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_MASTER_EDITION_ACCOUNT_LENGTH]: `Master edition account has an invalid length`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_METADATA_FLAGS]: ``,
    [MPL_TOKEN_METADATA_ERROR__INVALID_METADATA_KEY]: ` Metadata's key must match seed of ['metadata', program id, mint] provided`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_MINT_AUTHORITY]: `Mint authority provided does not match the authority on the mint`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_MINT_FOR_TOKEN_STANDARD]: `Invalid mint account for specified token standard`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_OPERATION]: `Invalid operation`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_OWNER]: `Invalid Owner`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_PARENT_ACCOUNTS]: `Invalid or Unneeded parent accounts`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_PRINT_EDITION]: `Invalid Print Edition`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_PROGRAMMABLE_CONFIG]: `Invalid programmable configuration`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_SYSTEM_PROGRAM]: `Invalid System Program`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_SYSTEM_WALLET]: `Invalid system wallet`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_PROGRAM]: `Invalid token program`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_RECORD]: `Invalid token record account`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_TOKEN_STANDARD]: `Invalid token standard`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_TRANSFER_AUTHORITY]: `Invalid transfer authority`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_UPDATE_ARGS]: `Authority cannot apply all update args`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_USE_AUTHORITY_RECORD]: `This Use Authority Record is invalid.`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_USE_METHOD]: `This use method is invalid`,
    [MPL_TOKEN_METADATA_ERROR__INVALID_USER]: `Invalid User`,
    [MPL_TOKEN_METADATA_ERROR__IS_MUTABLE_CAN_ONLY_BE_FLIPPED_TO_FALSE]: `Is Mutable can only be flipped to false`,
    [MPL_TOKEN_METADATA_ERROR__KEY_MISMATCH]: `Public key does not match expected value`,
    [MPL_TOKEN_METADATA_ERROR__LOCKED_TOKEN]: `Token is locked`,
    [MPL_TOKEN_METADATA_ERROR__MASTER_EDITION_HAS_PRINTS]: `This Master Edition has existing prints`,
    [MPL_TOKEN_METADATA_ERROR__MASTER_RECORD_MISMATCH]: ``,
    [MPL_TOKEN_METADATA_ERROR__MAX_EDITIONS_MINTED_ALREADY]: ``,
    [MPL_TOKEN_METADATA_ERROR__MINT_IS_NOT_SIGNER]: `Mint needs to be signer to initialize the account`,
    [MPL_TOKEN_METADATA_ERROR__MINT_MISMATCH]: `Mint given does not match mint on Metadata`,
    [MPL_TOKEN_METADATA_ERROR__MINT_SUPPLY_MUST_BE_ZERO]: `Mint supply must be zero for programmable assets`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_ACCOUNT_IN_BUILDER]: `Required account not set in instruction builder`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_ARGUMENT_IN_BUILDER]: `Required argument not set in instruction builder`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_AUTHORIZATION_RULES]: `Missing authorization rules account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_AUTHORIZATION_RULES_PROGRAM]: `Missing authorization rules program`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_MASTER_EDITION]: `Missing collection master edition account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_METADATA]: `Missing collection metadata account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_COLLECTION_MINT]: `Missing collection account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_DELEGATE_RECORD]: `Missing delegate record`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_DELEGATE_ROLE]: `Missing delegate role`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_EDITION]: `Missing edition account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_EDITION_ACCOUNT]: `This mint account has an edition but none was provided.`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_EDITION_MARKER_ACCOUNT]: `Missing edition marker account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_LOCKED_TRANSFER_ADDRESS]: `Missing address for locked transfer`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_ACCOUNT]: `Missing master edition account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_MINT_ACCOUNT]: `Missing master edition mint account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_MASTER_EDITION_TOKEN_ACCOUNT]: `Missing master edition token account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_PRINT_SUPPLY]: `Print supply is required for non-fungibles`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_PROGRAMMABLE_CONFIG]: `Missing programmable configuration`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_SPL_TOKEN_PROGRAM]: `Missing SPL token program`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_ACCOUNT]: `Missing token account`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_OWNER_ACCOUNT]: `Missing token owner`,
    [MPL_TOKEN_METADATA_ERROR__MISSING_TOKEN_RECORD]: `Missing token record account`,
    [MPL_TOKEN_METADATA_ERROR__MUST_BE_BURNED]: ``,
    [MPL_TOKEN_METADATA_ERROR__MUST_BE_ESCROW_AUTHORITY]: `Must Escrow Authority`,
    [MPL_TOKEN_METADATA_ERROR__MUST_BE_NON_FUNGIBLE]: `Must be a Non Fungible Token`,
    [MPL_TOKEN_METADATA_ERROR__MUST_BE_ONE_OF_CREATORS]: ``,
    [MPL_TOKEN_METADATA_ERROR__MUST_UNVERIFY]: `Must unverify before migrating collections.`,
    [MPL_TOKEN_METADATA_ERROR__NAME_TOO_LONG]: `Name too long`,
    [MPL_TOKEN_METADATA_ERROR__NO_BALANCE_IN_ACCOUNT_FOR_AUTHORIZATION]: `This account has no tokens to be used for authorization`,
    [MPL_TOKEN_METADATA_ERROR__NO_CREATORS_PRESENT_ON_METADATA]: `This metadata does not have creators`,
    [MPL_TOKEN_METADATA_ERROR__NO_FREEZE_AUTHORITY_SET]: `Cannot create NFT with no Freeze Authority.`,
    [MPL_TOKEN_METADATA_ERROR__NOT_A_COLLECTION_PARENT]: `This NFT is not a collection parent NFT.`,
    [MPL_TOKEN_METADATA_ERROR__NOT_ALLOWED_TO_CHANGE_SELLER_FEE_BASIS_POINTS]: ``,
    [MPL_TOKEN_METADATA_ERROR__NOT_A_MASTER_EDITION]: `This edition is not a Master Edition`,
    [MPL_TOKEN_METADATA_ERROR__NOT_A_MEMBER_OF_COLLECTION]: `This NFT is not a member of the specified collection.`,
    [MPL_TOKEN_METADATA_ERROR__NOT_A_PRINT_EDITION]: `This edition is not a Print Edition`,
    [MPL_TOKEN_METADATA_ERROR__NOT_ENOUGH_TOKENS]: `Not enough tokens to mint a limited edition`,
    [MPL_TOKEN_METADATA_ERROR__NOT_ENOUGH_USES]: `There are not enough Uses left on this token.`,
    [MPL_TOKEN_METADATA_ERROR__NOT_MINT_AUTHORITY]: `You must be the mint authority and signer on this transaction`,
    [MPL_TOKEN_METADATA_ERROR__NOT_RENT_EXEMPT]: `Lamport balance below rent-exempt threshold`,
    [MPL_TOKEN_METADATA_ERROR__NOT_VERIFIED_MEMBER_OF_COLLECTION]: `This NFT is not a verified member of the specified collection.`,
    [MPL_TOKEN_METADATA_ERROR__NUMERICAL_OVERFLOW_ERROR]: `NumericalOverflowError`,
    [MPL_TOKEN_METADATA_ERROR__ONE_TIME_AUTH_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION]: `One Time Auth mint supply must be zero for conversion`,
    [MPL_TOKEN_METADATA_ERROR__ONE_TIME_PRINTING_AUTH_MINT_MISMATCH]: `The One Time Printing Auth mint does not match that on the master edition!`,
    [MPL_TOKEN_METADATA_ERROR__ONE_TIME_PRINTING_AUTHORIZATION_MINT_DECIMALS_SHOULD_BE_ZERO]: ``,
    [MPL_TOKEN_METADATA_ERROR__ONLY_SALE_DELEGATE_CAN_TRANSFER]: `Only the sale delegate can transfer while its set`,
    [MPL_TOKEN_METADATA_ERROR__OWNER_MISMATCH]: `Owner does not match that on the account given`,
    [MPL_TOKEN_METADATA_ERROR__PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE]: `Primary sale can only be flipped to true and is immutable`,
    [MPL_TOKEN_METADATA_ERROR__PRINT_EDITION_DOES_NOT_MATCH_MASTER_EDITION]: `Print Edition does not match Master Edition`,
    [MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_AUTHORIZATION_ACCOUNT_MISMATCH]: ``,
    [MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_DECIMALS_SHOULD_BE_ZERO]: ``,
    [MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_MISMATCH]: `The Printing mint does not match that on the master edition!`,
    [MPL_TOKEN_METADATA_ERROR__PRINTING_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION]: `Printing mint supply must be zero for conversion`,
    [MPL_TOKEN_METADATA_ERROR__PRINTING_WOULD_BREACH_MAXIMUM_SUPPLY]: ``,
    [MPL_TOKEN_METADATA_ERROR__REMOVED]: `This instruction was deprecated in a previous release and is now removed`,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_ALREADY_MADE]: ``,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_ARRAY_SHOULD_BE_SIZE_ONE]: ``,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_BREACHES_MAXIMUM_SUPPLY]: ``,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_DOES_NOT_EXIST]: ``,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_EXISTS]: ``,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_LIST_DEPRECATED]: `Reservation List is Deprecated`,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_NOT_COMPLETE]: ``,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_NOT_SET]: ``,
    [MPL_TOKEN_METADATA_ERROR__RESERVATION_SPOTS_REMAINING_SHOULD_MATCH_TOTAL_SPOTS_AT_START]: ``,
    [MPL_TOKEN_METADATA_ERROR__REVOKE_COLLECTION_AUTHORITY_SIGNER_INCORRECT]: `Revoke Collection Authority signer is incorrect`,
    [MPL_TOKEN_METADATA_ERROR__SHARE_TOTAL_MUST_BE100]: `Share total must equal 100 for creator array`,
    [MPL_TOKEN_METADATA_ERROR__SIZED_COLLECTION]: `Can't use this function on a sized collection`,
    [MPL_TOKEN_METADATA_ERROR__SPOT_MISMATCH]: ``,
    [MPL_TOKEN_METADATA_ERROR__SYMBOL_TOO_LONG]: `Symbol too long`,
    [MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH]: `The mint of the token account does not match the Printing mint!`,
    [MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH_V2]: `The mint of the token account does not match the master metadata mint!`,
    [MPL_TOKEN_METADATA_ERROR__TOKEN_ACCOUNT_ONE_TIME_AUTH_MINT_MISMATCH]: ``,
    [MPL_TOKEN_METADATA_ERROR__TOKEN_BURN_FAILED]: ``,
    [MPL_TOKEN_METADATA_ERROR__TOKEN_CLOSE_FAILED]: ``,
    [MPL_TOKEN_METADATA_ERROR__TOKEN_MINT_TO_FAILED]: ``,
    [MPL_TOKEN_METADATA_ERROR__TRIED_TO_REPLACE_AN_EXISTING_RESERVATION]: ``,
    [MPL_TOKEN_METADATA_ERROR__UNINITIALIZED]: `Uninitialized`,
    [MPL_TOKEN_METADATA_ERROR__UNLOCKED_TOKEN]: `Token is unlocked`,
    [MPL_TOKEN_METADATA_ERROR__UNSIZED_COLLECTION]: `Can't use this function on unsized collection`,
    [MPL_TOKEN_METADATA_ERROR__UNUSABLE]: `This token has no uses`,
    [MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_INCORRECT]: `Update Authority given does not match`,
    [MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_IS_NOT_SIGNER]: `Update Authority needs to be signer to update metadata`,
    [MPL_TOKEN_METADATA_ERROR__UPDATE_AUTHORITY_MUST_BE_EQUAL_TO_METADATA_AUTHORITY_AND_SIGNER]: ``,
    [MPL_TOKEN_METADATA_ERROR__URI_TOO_LONG]: `URI too long`,
    [MPL_TOKEN_METADATA_ERROR__USE_AUTHORITY_RECORD_ALREADY_EXISTS]: `The Use Authority Record Already Exists, to modify it Revoke, then Approve`,
    [MPL_TOKEN_METADATA_ERROR__USE_AUTHORITY_RECORD_ALREADY_REVOKED]: `The Use Authority Record is empty or already revoked`,
  };
}

export function getMplTokenMetadataErrorMessage(
  code: MplTokenMetadataError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      mplTokenMetadataErrorMessages as Record<MplTokenMetadataError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isMplTokenMetadataError<
  TProgramErrorCode extends MplTokenMetadataError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
    code
  );
}
