/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findMasterEditionPda, findMetadataPda } from '../pdas';
import { MPL_TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const RESIZE_DISCRIMINATOR = 56;

export function getResizeDiscriminatorBytes() {
  return getU8Encoder().encode(RESIZE_DISCRIMINATOR);
}

export type ResizeInstruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountEdition extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountToken extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountEdition extends string
        ? WritableAccount<TAccountEdition>
        : TAccountEdition,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountPayer extends string
        ? WritableAccount<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountToken extends string
        ? ReadonlyAccount<TAccountToken>
        : TAccountToken,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResizeInstructionData = { discriminator: number };

export type ResizeInstructionDataArgs = {};

export function getResizeInstructionDataEncoder(): FixedSizeEncoder<ResizeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: RESIZE_DISCRIMINATOR })
  );
}

export function getResizeInstructionDataDecoder(): FixedSizeDecoder<ResizeInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getResizeInstructionDataCodec(): FixedSizeCodec<
  ResizeInstructionDataArgs,
  ResizeInstructionData
> {
  return combineCodec(
    getResizeInstructionDataEncoder(),
    getResizeInstructionDataDecoder()
  );
}

export type ResizeAsyncInput<
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountMint extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountToken extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The metadata account of the digital asset */
  metadata?: Address<TAccountMetadata>;
  /** The master edition or edition account of the digital asset, an uninitialized account for fungible assets */
  edition?: Address<TAccountEdition>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** The recipient of the excess rent and authority if the authority account is not present */
  payer: Address<TAccountPayer> | TransactionSigner<TAccountPayer>;
  /** Owner of the asset for (p)NFTs, or mint authority for fungible assets, if different from the payer */
  authority?: TransactionSigner<TAccountAuthority>;
  /** Token or Associated Token account */
  token?: Address<TAccountToken>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getResizeInstructionAsync<
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountToken extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: ResizeAsyncInput<
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountPayer,
    TAccountAuthority,
    TAccountToken,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ResizeInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    (typeof input)['payer'] extends TransactionSigner<TAccountPayer>
      ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
      : TAccountPayer,
    TAccountAuthority,
    TAccountToken,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    token: { value: input.token ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.metadata.value) {
    accounts.metadata.value = await findMetadataPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.edition.value) {
    accounts.edition.value = await findMasterEditionPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResizeInstructionDataEncoder().encode({}),
  } as ResizeInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    (typeof input)['payer'] extends TransactionSigner<TAccountPayer>
      ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
      : TAccountPayer,
    TAccountAuthority,
    TAccountToken,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ResizeInput<
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountMint extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountToken extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The metadata account of the digital asset */
  metadata: Address<TAccountMetadata>;
  /** The master edition or edition account of the digital asset, an uninitialized account for fungible assets */
  edition: Address<TAccountEdition>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** The recipient of the excess rent and authority if the authority account is not present */
  payer: Address<TAccountPayer> | TransactionSigner<TAccountPayer>;
  /** Owner of the asset for (p)NFTs, or mint authority for fungible assets, if different from the payer */
  authority?: TransactionSigner<TAccountAuthority>;
  /** Token or Associated Token account */
  token?: Address<TAccountToken>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getResizeInstruction<
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountMint extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountToken extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: ResizeInput<
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    TAccountPayer,
    TAccountAuthority,
    TAccountToken,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResizeInstruction<
  TProgramAddress,
  TAccountMetadata,
  TAccountEdition,
  TAccountMint,
  (typeof input)['payer'] extends TransactionSigner<TAccountPayer>
    ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
    : TAccountPayer,
  TAccountAuthority,
  TAccountToken,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    token: { value: input.token ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResizeInstructionDataEncoder().encode({}),
  } as ResizeInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountEdition,
    TAccountMint,
    (typeof input)['payer'] extends TransactionSigner<TAccountPayer>
      ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer>
      : TAccountPayer,
    TAccountAuthority,
    TAccountToken,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedResizeInstruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The metadata account of the digital asset */
    metadata: TAccountMetas[0];
    /** The master edition or edition account of the digital asset, an uninitialized account for fungible assets */
    edition: TAccountMetas[1];
    /** Mint of token asset */
    mint: TAccountMetas[2];
    /** The recipient of the excess rent and authority if the authority account is not present */
    payer: TAccountMetas[3];
    /** Owner of the asset for (p)NFTs, or mint authority for fungible assets, if different from the payer */
    authority?: TAccountMetas[4] | undefined;
    /** Token or Associated Token account */
    token?: TAccountMetas[5] | undefined;
    /** System program */
    systemProgram: TAccountMetas[6];
  };
  data: ResizeInstructionData;
};

export function parseResizeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedResizeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_TOKEN_METADATA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      edition: getNextAccount(),
      mint: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      token: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
    },
    data: getResizeInstructionDataDecoder().decode(instruction.data),
  };
}
