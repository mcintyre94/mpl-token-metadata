/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findMetadataPda } from '../pdas';
import { MPL_TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getAuthorizationDataDecoder,
  getAuthorizationDataEncoder,
  getCollectionDetailsToggleDecoder,
  getCollectionDetailsToggleEncoder,
  getCollectionToggleDecoder,
  getCollectionToggleEncoder,
  getDataDecoder,
  getDataEncoder,
  getRuleSetToggleDecoder,
  getRuleSetToggleEncoder,
  getTokenStandardDecoder,
  getTokenStandardEncoder,
  getUsesToggleDecoder,
  getUsesToggleEncoder,
  type AuthorizationData,
  type AuthorizationDataArgs,
  type CollectionDetailsToggle,
  type CollectionDetailsToggleArgs,
  type CollectionToggle,
  type CollectionToggleArgs,
  type Data,
  type DataArgs,
  type RuleSetToggle,
  type RuleSetToggleArgs,
  type TokenStandard,
  type TokenStandardArgs,
  type UsesToggle,
  type UsesToggleArgs,
} from '../types';

export const UPDATE_AS_UPDATE_AUTHORITY_V2_DISCRIMINATOR = 50;

export function getUpdateAsUpdateAuthorityV2DiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_AS_UPDATE_AUTHORITY_V2_DISCRIMINATOR);
}

export type UpdateAsUpdateAuthorityV2Instruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountDelegateRecord extends string | AccountMeta<string> = string,
  TAccountToken extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountEdition extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountAuthorizationRulesProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountAuthorizationRules extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountDelegateRecord extends string
        ? ReadonlyAccount<TAccountDelegateRecord>
        : TAccountDelegateRecord,
      TAccountToken extends string
        ? ReadonlyAccount<TAccountToken>
        : TAccountToken,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountEdition extends string
        ? ReadonlyAccount<TAccountEdition>
        : TAccountEdition,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      TAccountAuthorizationRulesProgram extends string
        ? ReadonlyAccount<TAccountAuthorizationRulesProgram>
        : TAccountAuthorizationRulesProgram,
      TAccountAuthorizationRules extends string
        ? ReadonlyAccount<TAccountAuthorizationRules>
        : TAccountAuthorizationRules,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateAsUpdateAuthorityV2InstructionData = {
  discriminator: number;
  updateAsUpdateAuthorityV2Discriminator: number;
  newUpdateAuthority: Option<Address>;
  data: Option<Data>;
  primarySaleHappened: Option<boolean>;
  isMutable: Option<boolean>;
  collection: CollectionToggle;
  collectionDetails: CollectionDetailsToggle;
  uses: UsesToggle;
  ruleSet: RuleSetToggle;
  tokenStandard: Option<TokenStandard>;
  authorizationData: Option<AuthorizationData>;
};

export type UpdateAsUpdateAuthorityV2InstructionDataArgs = {
  newUpdateAuthority: OptionOrNullable<Address>;
  data: OptionOrNullable<DataArgs>;
  primarySaleHappened: OptionOrNullable<boolean>;
  isMutable: OptionOrNullable<boolean>;
  collection: CollectionToggleArgs;
  collectionDetails: CollectionDetailsToggleArgs;
  uses: UsesToggleArgs;
  ruleSet: RuleSetToggleArgs;
  tokenStandard?: OptionOrNullable<TokenStandardArgs>;
  authorizationData: OptionOrNullable<AuthorizationDataArgs>;
};

export function getUpdateAsUpdateAuthorityV2InstructionDataEncoder(): Encoder<UpdateAsUpdateAuthorityV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['updateAsUpdateAuthorityV2Discriminator', getU8Encoder()],
      ['newUpdateAuthority', getOptionEncoder(getAddressEncoder())],
      ['data', getOptionEncoder(getDataEncoder())],
      ['primarySaleHappened', getOptionEncoder(getBooleanEncoder())],
      ['isMutable', getOptionEncoder(getBooleanEncoder())],
      ['collection', getCollectionToggleEncoder()],
      ['collectionDetails', getCollectionDetailsToggleEncoder()],
      ['uses', getUsesToggleEncoder()],
      ['ruleSet', getRuleSetToggleEncoder()],
      ['tokenStandard', getOptionEncoder(getTokenStandardEncoder())],
      ['authorizationData', getOptionEncoder(getAuthorizationDataEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_AS_UPDATE_AUTHORITY_V2_DISCRIMINATOR,
      updateAsUpdateAuthorityV2Discriminator: 1,
      tokenStandard: value.tokenStandard ?? none(),
    })
  );
}

export function getUpdateAsUpdateAuthorityV2InstructionDataDecoder(): Decoder<UpdateAsUpdateAuthorityV2InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['updateAsUpdateAuthorityV2Discriminator', getU8Decoder()],
    ['newUpdateAuthority', getOptionDecoder(getAddressDecoder())],
    ['data', getOptionDecoder(getDataDecoder())],
    ['primarySaleHappened', getOptionDecoder(getBooleanDecoder())],
    ['isMutable', getOptionDecoder(getBooleanDecoder())],
    ['collection', getCollectionToggleDecoder()],
    ['collectionDetails', getCollectionDetailsToggleDecoder()],
    ['uses', getUsesToggleDecoder()],
    ['ruleSet', getRuleSetToggleDecoder()],
    ['tokenStandard', getOptionDecoder(getTokenStandardDecoder())],
    ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
  ]);
}

export function getUpdateAsUpdateAuthorityV2InstructionDataCodec(): Codec<
  UpdateAsUpdateAuthorityV2InstructionDataArgs,
  UpdateAsUpdateAuthorityV2InstructionData
> {
  return combineCodec(
    getUpdateAsUpdateAuthorityV2InstructionDataEncoder(),
    getUpdateAsUpdateAuthorityV2InstructionDataDecoder()
  );
}

export type UpdateAsUpdateAuthorityV2AsyncInput<
  TAccountAuthority extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountToken extends string = string,
  TAccountMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
  TAccountAuthorizationRulesProgram extends string = string,
  TAccountAuthorizationRules extends string = string,
> = {
  /** Update authority or delegate */
  authority: TransactionSigner<TAccountAuthority>;
  /** Delegate record PDA */
  delegateRecord?: Address<TAccountDelegateRecord>;
  /** Token account */
  token?: Address<TAccountToken>;
  /** Mint account */
  mint: Address<TAccountMint>;
  /** Metadata account */
  metadata?: Address<TAccountMetadata>;
  /** Edition account */
  edition?: Address<TAccountEdition>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: Address<TAccountAuthorizationRulesProgram>;
  /** Token Authorization Rules account */
  authorizationRules?: Address<TAccountAuthorizationRules>;
  newUpdateAuthority: UpdateAsUpdateAuthorityV2InstructionDataArgs['newUpdateAuthority'];
  data: UpdateAsUpdateAuthorityV2InstructionDataArgs['data'];
  primarySaleHappened: UpdateAsUpdateAuthorityV2InstructionDataArgs['primarySaleHappened'];
  isMutable: UpdateAsUpdateAuthorityV2InstructionDataArgs['isMutable'];
  collection: UpdateAsUpdateAuthorityV2InstructionDataArgs['collection'];
  collectionDetails: UpdateAsUpdateAuthorityV2InstructionDataArgs['collectionDetails'];
  uses: UpdateAsUpdateAuthorityV2InstructionDataArgs['uses'];
  ruleSet: UpdateAsUpdateAuthorityV2InstructionDataArgs['ruleSet'];
  tokenStandard?: UpdateAsUpdateAuthorityV2InstructionDataArgs['tokenStandard'];
  authorizationData: UpdateAsUpdateAuthorityV2InstructionDataArgs['authorizationData'];
};

export async function getUpdateAsUpdateAuthorityV2InstructionAsync<
  TAccountAuthority extends string,
  TAccountDelegateRecord extends string,
  TAccountToken extends string,
  TAccountMint extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountAuthorizationRulesProgram extends string,
  TAccountAuthorizationRules extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: UpdateAsUpdateAuthorityV2AsyncInput<
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountToken,
    TAccountMint,
    TAccountMetadata,
    TAccountEdition,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateAsUpdateAuthorityV2Instruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountToken,
    TAccountMint,
    TAccountMetadata,
    TAccountEdition,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    delegateRecord: { value: input.delegateRecord ?? null, isWritable: false },
    token: { value: input.token ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    authorizationRulesProgram: {
      value: input.authorizationRulesProgram ?? null,
      isWritable: false,
    },
    authorizationRules: {
      value: input.authorizationRules ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.metadata.value) {
    accounts.metadata.value = await findMetadataPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.authorizationRulesProgram.value) {
    if (accounts.authorizationRules.value) {
      accounts.authorizationRulesProgram.value =
        'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg' as Address<'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'>;
    }
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.delegateRecord),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.sysvarInstructions),
      getAccountMeta(accounts.authorizationRulesProgram),
      getAccountMeta(accounts.authorizationRules),
    ],
    programAddress,
    data: getUpdateAsUpdateAuthorityV2InstructionDataEncoder().encode(
      args as UpdateAsUpdateAuthorityV2InstructionDataArgs
    ),
  } as UpdateAsUpdateAuthorityV2Instruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountToken,
    TAccountMint,
    TAccountMetadata,
    TAccountEdition,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >;

  return instruction;
}

export type UpdateAsUpdateAuthorityV2Input<
  TAccountAuthority extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountToken extends string = string,
  TAccountMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
  TAccountAuthorizationRulesProgram extends string = string,
  TAccountAuthorizationRules extends string = string,
> = {
  /** Update authority or delegate */
  authority: TransactionSigner<TAccountAuthority>;
  /** Delegate record PDA */
  delegateRecord?: Address<TAccountDelegateRecord>;
  /** Token account */
  token?: Address<TAccountToken>;
  /** Mint account */
  mint: Address<TAccountMint>;
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Edition account */
  edition?: Address<TAccountEdition>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: Address<TAccountAuthorizationRulesProgram>;
  /** Token Authorization Rules account */
  authorizationRules?: Address<TAccountAuthorizationRules>;
  newUpdateAuthority: UpdateAsUpdateAuthorityV2InstructionDataArgs['newUpdateAuthority'];
  data: UpdateAsUpdateAuthorityV2InstructionDataArgs['data'];
  primarySaleHappened: UpdateAsUpdateAuthorityV2InstructionDataArgs['primarySaleHappened'];
  isMutable: UpdateAsUpdateAuthorityV2InstructionDataArgs['isMutable'];
  collection: UpdateAsUpdateAuthorityV2InstructionDataArgs['collection'];
  collectionDetails: UpdateAsUpdateAuthorityV2InstructionDataArgs['collectionDetails'];
  uses: UpdateAsUpdateAuthorityV2InstructionDataArgs['uses'];
  ruleSet: UpdateAsUpdateAuthorityV2InstructionDataArgs['ruleSet'];
  tokenStandard?: UpdateAsUpdateAuthorityV2InstructionDataArgs['tokenStandard'];
  authorizationData: UpdateAsUpdateAuthorityV2InstructionDataArgs['authorizationData'];
};

export function getUpdateAsUpdateAuthorityV2Instruction<
  TAccountAuthority extends string,
  TAccountDelegateRecord extends string,
  TAccountToken extends string,
  TAccountMint extends string,
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountAuthorizationRulesProgram extends string,
  TAccountAuthorizationRules extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: UpdateAsUpdateAuthorityV2Input<
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountToken,
    TAccountMint,
    TAccountMetadata,
    TAccountEdition,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateAsUpdateAuthorityV2Instruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountDelegateRecord,
  TAccountToken,
  TAccountMint,
  TAccountMetadata,
  TAccountEdition,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountSysvarInstructions,
  TAccountAuthorizationRulesProgram,
  TAccountAuthorizationRules
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    delegateRecord: { value: input.delegateRecord ?? null, isWritable: false },
    token: { value: input.token ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    authorizationRulesProgram: {
      value: input.authorizationRulesProgram ?? null,
      isWritable: false,
    },
    authorizationRules: {
      value: input.authorizationRules ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.authorizationRulesProgram.value) {
    if (accounts.authorizationRules.value) {
      accounts.authorizationRulesProgram.value =
        'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg' as Address<'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'>;
    }
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.delegateRecord),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.sysvarInstructions),
      getAccountMeta(accounts.authorizationRulesProgram),
      getAccountMeta(accounts.authorizationRules),
    ],
    programAddress,
    data: getUpdateAsUpdateAuthorityV2InstructionDataEncoder().encode(
      args as UpdateAsUpdateAuthorityV2InstructionDataArgs
    ),
  } as UpdateAsUpdateAuthorityV2Instruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountToken,
    TAccountMint,
    TAccountMetadata,
    TAccountEdition,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >;

  return instruction;
}

export type ParsedUpdateAsUpdateAuthorityV2Instruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Update authority or delegate */
    authority: TAccountMetas[0];
    /** Delegate record PDA */
    delegateRecord?: TAccountMetas[1] | undefined;
    /** Token account */
    token?: TAccountMetas[2] | undefined;
    /** Mint account */
    mint: TAccountMetas[3];
    /** Metadata account */
    metadata: TAccountMetas[4];
    /** Edition account */
    edition?: TAccountMetas[5] | undefined;
    /** Payer */
    payer: TAccountMetas[6];
    /** System program */
    systemProgram: TAccountMetas[7];
    /** Instructions sysvar account */
    sysvarInstructions: TAccountMetas[8];
    /** Token Authorization Rules Program */
    authorizationRulesProgram?: TAccountMetas[9] | undefined;
    /** Token Authorization Rules account */
    authorizationRules?: TAccountMetas[10] | undefined;
  };
  data: UpdateAsUpdateAuthorityV2InstructionData;
};

export function parseUpdateAsUpdateAuthorityV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateAsUpdateAuthorityV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_TOKEN_METADATA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      delegateRecord: getNextOptionalAccount(),
      token: getNextOptionalAccount(),
      mint: getNextAccount(),
      metadata: getNextAccount(),
      edition: getNextOptionalAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      sysvarInstructions: getNextAccount(),
      authorizationRulesProgram: getNextOptionalAccount(),
      authorizationRules: getNextOptionalAccount(),
    },
    data: getUpdateAsUpdateAuthorityV2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
