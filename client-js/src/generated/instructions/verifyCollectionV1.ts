/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MPL_TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const VERIFY_COLLECTION_V1_DISCRIMINATOR = 52;

export function getVerifyCollectionV1DiscriminatorBytes() {
  return getU8Encoder().encode(VERIFY_COLLECTION_V1_DISCRIMINATOR);
}

export type VerifyCollectionV1Instruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountDelegateRecord extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountCollectionMint extends string | AccountMeta<string> = string,
  TAccountCollectionMetadata extends string | AccountMeta<string> = string,
  TAccountCollectionMasterEdition extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountDelegateRecord extends string
        ? ReadonlyAccount<TAccountDelegateRecord>
        : TAccountDelegateRecord,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountCollectionMint extends string
        ? ReadonlyAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountCollectionMasterEdition extends string
        ? ReadonlyAccount<TAccountCollectionMasterEdition>
        : TAccountCollectionMasterEdition,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      ...TRemainingAccounts,
    ]
  >;

export type VerifyCollectionV1InstructionData = {
  discriminator: number;
  verifyCollectionV1Discriminator: number;
};

export type VerifyCollectionV1InstructionDataArgs = {};

export function getVerifyCollectionV1InstructionDataEncoder(): FixedSizeEncoder<VerifyCollectionV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['verifyCollectionV1Discriminator', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: VERIFY_COLLECTION_V1_DISCRIMINATOR,
      verifyCollectionV1Discriminator: 1,
    })
  );
}

export function getVerifyCollectionV1InstructionDataDecoder(): FixedSizeDecoder<VerifyCollectionV1InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['verifyCollectionV1Discriminator', getU8Decoder()],
  ]);
}

export function getVerifyCollectionV1InstructionDataCodec(): FixedSizeCodec<
  VerifyCollectionV1InstructionDataArgs,
  VerifyCollectionV1InstructionData
> {
  return combineCodec(
    getVerifyCollectionV1InstructionDataEncoder(),
    getVerifyCollectionV1InstructionDataDecoder()
  );
}

export type VerifyCollectionV1Input<
  TAccountAuthority extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountMetadata extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionMasterEdition extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
> = {
  /** Creator to verify, collection update authority or delegate */
  authority: TransactionSigner<TAccountAuthority>;
  /** Delegate record PDA */
  delegateRecord?: Address<TAccountDelegateRecord>;
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Mint of the Collection */
  collectionMint?: Address<TAccountCollectionMint>;
  /** Metadata Account of the Collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  /** Master Edition Account of the Collection Token */
  collectionMasterEdition?: Address<TAccountCollectionMasterEdition>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instructions sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
};

export function getVerifyCollectionV1Instruction<
  TAccountAuthority extends string,
  TAccountDelegateRecord extends string,
  TAccountMetadata extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionMasterEdition extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: VerifyCollectionV1Input<
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountMetadata,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountSystemProgram,
    TAccountSysvarInstructions
  >,
  config?: { programAddress?: TProgramAddress }
): VerifyCollectionV1Instruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountDelegateRecord,
  TAccountMetadata,
  TAccountCollectionMint,
  TAccountCollectionMetadata,
  TAccountCollectionMasterEdition,
  TAccountSystemProgram,
  TAccountSysvarInstructions
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    delegateRecord: { value: input.delegateRecord ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    collectionMasterEdition: {
      value: input.collectionMasterEdition ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.delegateRecord),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionMasterEdition),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.sysvarInstructions),
    ],
    programAddress,
    data: getVerifyCollectionV1InstructionDataEncoder().encode({}),
  } as VerifyCollectionV1Instruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountDelegateRecord,
    TAccountMetadata,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountSystemProgram,
    TAccountSysvarInstructions
  >;

  return instruction;
}

export type ParsedVerifyCollectionV1Instruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Creator to verify, collection update authority or delegate */
    authority: TAccountMetas[0];
    /** Delegate record PDA */
    delegateRecord?: TAccountMetas[1] | undefined;
    /** Metadata account */
    metadata: TAccountMetas[2];
    /** Mint of the Collection */
    collectionMint?: TAccountMetas[3] | undefined;
    /** Metadata Account of the Collection */
    collectionMetadata?: TAccountMetas[4] | undefined;
    /** Master Edition Account of the Collection Token */
    collectionMasterEdition?: TAccountMetas[5] | undefined;
    /** System program */
    systemProgram: TAccountMetas[6];
    /** Instructions sysvar account */
    sysvarInstructions: TAccountMetas[7];
  };
  data: VerifyCollectionV1InstructionData;
};

export function parseVerifyCollectionV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVerifyCollectionV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_TOKEN_METADATA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      delegateRecord: getNextOptionalAccount(),
      metadata: getNextAccount(),
      collectionMint: getNextOptionalAccount(),
      collectionMetadata: getNextOptionalAccount(),
      collectionMasterEdition: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      sysvarInstructions: getNextAccount(),
    },
    data: getVerifyCollectionV1InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
