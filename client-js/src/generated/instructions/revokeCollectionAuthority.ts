/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findMetadataPda } from '../pdas';
import { MPL_TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REVOKE_COLLECTION_AUTHORITY_DISCRIMINATOR = 24;

export function getRevokeCollectionAuthorityDiscriminatorBytes() {
  return getU8Encoder().encode(REVOKE_COLLECTION_AUTHORITY_DISCRIMINATOR);
}

export type RevokeCollectionAuthorityInstruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountCollectionAuthorityRecord extends
    | string
    | AccountMeta<string> = string,
  TAccountDelegateAuthority extends string | AccountMeta<string> = string,
  TAccountRevokeAuthority extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCollectionAuthorityRecord extends string
        ? WritableAccount<TAccountCollectionAuthorityRecord>
        : TAccountCollectionAuthorityRecord,
      TAccountDelegateAuthority extends string
        ? WritableAccount<TAccountDelegateAuthority>
        : TAccountDelegateAuthority,
      TAccountRevokeAuthority extends string
        ? WritableSignerAccount<TAccountRevokeAuthority> &
            AccountSignerMeta<TAccountRevokeAuthority>
        : TAccountRevokeAuthority,
      TAccountMetadata extends string
        ? ReadonlyAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      ...TRemainingAccounts,
    ]
  >;

export type RevokeCollectionAuthorityInstructionData = {
  discriminator: number;
};

export type RevokeCollectionAuthorityInstructionDataArgs = {};

export function getRevokeCollectionAuthorityInstructionDataEncoder(): FixedSizeEncoder<RevokeCollectionAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: REVOKE_COLLECTION_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getRevokeCollectionAuthorityInstructionDataDecoder(): FixedSizeDecoder<RevokeCollectionAuthorityInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getRevokeCollectionAuthorityInstructionDataCodec(): FixedSizeCodec<
  RevokeCollectionAuthorityInstructionDataArgs,
  RevokeCollectionAuthorityInstructionData
> {
  return combineCodec(
    getRevokeCollectionAuthorityInstructionDataEncoder(),
    getRevokeCollectionAuthorityInstructionDataDecoder()
  );
}

export type RevokeCollectionAuthorityAsyncInput<
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountDelegateAuthority extends string = string,
  TAccountRevokeAuthority extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
> = {
  /** Collection Authority Record PDA */
  collectionAuthorityRecord: Address<TAccountCollectionAuthorityRecord>;
  /** Delegated Collection Authority */
  delegateAuthority: Address<TAccountDelegateAuthority>;
  /** Update Authority, or Delegated Authority, of Collection NFT */
  revokeAuthority: TransactionSigner<TAccountRevokeAuthority>;
  /** Metadata account */
  metadata?: Address<TAccountMetadata>;
  /** Mint of Metadata */
  mint: Address<TAccountMint>;
};

export async function getRevokeCollectionAuthorityInstructionAsync<
  TAccountCollectionAuthorityRecord extends string,
  TAccountDelegateAuthority extends string,
  TAccountRevokeAuthority extends string,
  TAccountMetadata extends string,
  TAccountMint extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: RevokeCollectionAuthorityAsyncInput<
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountRevokeAuthority,
    TAccountMetadata,
    TAccountMint
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RevokeCollectionAuthorityInstruction<
    TProgramAddress,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountRevokeAuthority,
    TAccountMetadata,
    TAccountMint
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collectionAuthorityRecord: {
      value: input.collectionAuthorityRecord ?? null,
      isWritable: true,
    },
    delegateAuthority: {
      value: input.delegateAuthority ?? null,
      isWritable: true,
    },
    revokeAuthority: { value: input.revokeAuthority ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.metadata.value) {
    accounts.metadata.value = await findMetadataPda({
      mint: expectAddress(accounts.mint.value),
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.collectionAuthorityRecord),
      getAccountMeta(accounts.delegateAuthority),
      getAccountMeta(accounts.revokeAuthority),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
    ],
    programAddress,
    data: getRevokeCollectionAuthorityInstructionDataEncoder().encode({}),
  } as RevokeCollectionAuthorityInstruction<
    TProgramAddress,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountRevokeAuthority,
    TAccountMetadata,
    TAccountMint
  >;

  return instruction;
}

export type RevokeCollectionAuthorityInput<
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountDelegateAuthority extends string = string,
  TAccountRevokeAuthority extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
> = {
  /** Collection Authority Record PDA */
  collectionAuthorityRecord: Address<TAccountCollectionAuthorityRecord>;
  /** Delegated Collection Authority */
  delegateAuthority: Address<TAccountDelegateAuthority>;
  /** Update Authority, or Delegated Authority, of Collection NFT */
  revokeAuthority: TransactionSigner<TAccountRevokeAuthority>;
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Mint of Metadata */
  mint: Address<TAccountMint>;
};

export function getRevokeCollectionAuthorityInstruction<
  TAccountCollectionAuthorityRecord extends string,
  TAccountDelegateAuthority extends string,
  TAccountRevokeAuthority extends string,
  TAccountMetadata extends string,
  TAccountMint extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: RevokeCollectionAuthorityInput<
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountRevokeAuthority,
    TAccountMetadata,
    TAccountMint
  >,
  config?: { programAddress?: TProgramAddress }
): RevokeCollectionAuthorityInstruction<
  TProgramAddress,
  TAccountCollectionAuthorityRecord,
  TAccountDelegateAuthority,
  TAccountRevokeAuthority,
  TAccountMetadata,
  TAccountMint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collectionAuthorityRecord: {
      value: input.collectionAuthorityRecord ?? null,
      isWritable: true,
    },
    delegateAuthority: {
      value: input.delegateAuthority ?? null,
      isWritable: true,
    },
    revokeAuthority: { value: input.revokeAuthority ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.collectionAuthorityRecord),
      getAccountMeta(accounts.delegateAuthority),
      getAccountMeta(accounts.revokeAuthority),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
    ],
    programAddress,
    data: getRevokeCollectionAuthorityInstructionDataEncoder().encode({}),
  } as RevokeCollectionAuthorityInstruction<
    TProgramAddress,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountRevokeAuthority,
    TAccountMetadata,
    TAccountMint
  >;

  return instruction;
}

export type ParsedRevokeCollectionAuthorityInstruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Collection Authority Record PDA */
    collectionAuthorityRecord: TAccountMetas[0];
    /** Delegated Collection Authority */
    delegateAuthority: TAccountMetas[1];
    /** Update Authority, or Delegated Authority, of Collection NFT */
    revokeAuthority: TAccountMetas[2];
    /** Metadata account */
    metadata: TAccountMetas[3];
    /** Mint of Metadata */
    mint: TAccountMetas[4];
  };
  data: RevokeCollectionAuthorityInstructionData;
};

export function parseRevokeCollectionAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRevokeCollectionAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      collectionAuthorityRecord: getNextAccount(),
      delegateAuthority: getNextAccount(),
      revokeAuthority: getNextAccount(),
      metadata: getNextAccount(),
      mint: getNextAccount(),
    },
    data: getRevokeCollectionAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
