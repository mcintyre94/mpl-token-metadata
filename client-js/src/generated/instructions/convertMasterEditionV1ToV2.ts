/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { MPL_TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CONVERT_MASTER_EDITION_V1_TO_V2_DISCRIMINATOR = 12;

export function getConvertMasterEditionV1ToV2DiscriminatorBytes() {
  return getU8Encoder().encode(CONVERT_MASTER_EDITION_V1_TO_V2_DISCRIMINATOR);
}

export type ConvertMasterEditionV1ToV2Instruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMasterEdition extends string | AccountMeta<string> = string,
  TAccountOneTimeAuth extends string | AccountMeta<string> = string,
  TAccountPrintingMint extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMasterEdition extends string
        ? WritableAccount<TAccountMasterEdition>
        : TAccountMasterEdition,
      TAccountOneTimeAuth extends string
        ? WritableAccount<TAccountOneTimeAuth>
        : TAccountOneTimeAuth,
      TAccountPrintingMint extends string
        ? WritableAccount<TAccountPrintingMint>
        : TAccountPrintingMint,
      ...TRemainingAccounts,
    ]
  >;

export type ConvertMasterEditionV1ToV2InstructionData = {
  discriminator: number;
};

export type ConvertMasterEditionV1ToV2InstructionDataArgs = {};

export function getConvertMasterEditionV1ToV2InstructionDataEncoder(): FixedSizeEncoder<ConvertMasterEditionV1ToV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CONVERT_MASTER_EDITION_V1_TO_V2_DISCRIMINATOR,
    })
  );
}

export function getConvertMasterEditionV1ToV2InstructionDataDecoder(): FixedSizeDecoder<ConvertMasterEditionV1ToV2InstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getConvertMasterEditionV1ToV2InstructionDataCodec(): FixedSizeCodec<
  ConvertMasterEditionV1ToV2InstructionDataArgs,
  ConvertMasterEditionV1ToV2InstructionData
> {
  return combineCodec(
    getConvertMasterEditionV1ToV2InstructionDataEncoder(),
    getConvertMasterEditionV1ToV2InstructionDataDecoder()
  );
}

export type ConvertMasterEditionV1ToV2Input<
  TAccountMasterEdition extends string = string,
  TAccountOneTimeAuth extends string = string,
  TAccountPrintingMint extends string = string,
> = {
  /** Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition']) */
  masterEdition: Address<TAccountMasterEdition>;
  /** One time authorization mint */
  oneTimeAuth: Address<TAccountOneTimeAuth>;
  /** Printing mint */
  printingMint: Address<TAccountPrintingMint>;
};

export function getConvertMasterEditionV1ToV2Instruction<
  TAccountMasterEdition extends string,
  TAccountOneTimeAuth extends string,
  TAccountPrintingMint extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: ConvertMasterEditionV1ToV2Input<
    TAccountMasterEdition,
    TAccountOneTimeAuth,
    TAccountPrintingMint
  >,
  config?: { programAddress?: TProgramAddress }
): ConvertMasterEditionV1ToV2Instruction<
  TProgramAddress,
  TAccountMasterEdition,
  TAccountOneTimeAuth,
  TAccountPrintingMint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    oneTimeAuth: { value: input.oneTimeAuth ?? null, isWritable: true },
    printingMint: { value: input.printingMint ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.oneTimeAuth),
      getAccountMeta(accounts.printingMint),
    ],
    programAddress,
    data: getConvertMasterEditionV1ToV2InstructionDataEncoder().encode({}),
  } as ConvertMasterEditionV1ToV2Instruction<
    TProgramAddress,
    TAccountMasterEdition,
    TAccountOneTimeAuth,
    TAccountPrintingMint
  >;

  return instruction;
}

export type ParsedConvertMasterEditionV1ToV2Instruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition']) */
    masterEdition: TAccountMetas[0];
    /** One time authorization mint */
    oneTimeAuth: TAccountMetas[1];
    /** Printing mint */
    printingMint: TAccountMetas[2];
  };
  data: ConvertMasterEditionV1ToV2InstructionData;
};

export function parseConvertMasterEditionV1ToV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedConvertMasterEditionV1ToV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      masterEdition: getNextAccount(),
      oneTimeAuth: getNextAccount(),
      printingMint: getNextAccount(),
    },
    data: getConvertMasterEditionV1ToV2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
