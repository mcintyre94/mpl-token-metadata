/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  findMasterEditionPda,
  findMetadataPda,
  findTokenRecordPda,
} from '../pdas';
import { MPL_TOKEN_METADATA_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MIGRATE_DISCRIMINATOR = 48;

export function getMigrateDiscriminatorBytes() {
  return getU8Encoder().encode(MIGRATE_DISCRIMINATOR);
}

export type MigrateInstruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountEdition extends string | AccountMeta<string> = string,
  TAccountToken extends string | AccountMeta<string> = string,
  TAccountTokenOwner extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountCollectionMetadata extends string | AccountMeta<string> = string,
  TAccountDelegateRecord extends string | AccountMeta<string> = string,
  TAccountTokenRecord extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountSplTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAuthorizationRulesProgram extends
    | string
    | AccountMeta<string> = string,
  TAccountAuthorizationRules extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountEdition extends string
        ? WritableAccount<TAccountEdition>
        : TAccountEdition,
      TAccountToken extends string
        ? WritableAccount<TAccountToken>
        : TAccountToken,
      TAccountTokenOwner extends string
        ? ReadonlyAccount<TAccountTokenOwner>
        : TAccountTokenOwner,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCollectionMetadata extends string
        ? ReadonlyAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountDelegateRecord extends string
        ? ReadonlyAccount<TAccountDelegateRecord>
        : TAccountDelegateRecord,
      TAccountTokenRecord extends string
        ? WritableAccount<TAccountTokenRecord>
        : TAccountTokenRecord,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      TAccountSplTokenProgram extends string
        ? ReadonlyAccount<TAccountSplTokenProgram>
        : TAccountSplTokenProgram,
      TAccountAuthorizationRulesProgram extends string
        ? ReadonlyAccount<TAccountAuthorizationRulesProgram>
        : TAccountAuthorizationRulesProgram,
      TAccountAuthorizationRules extends string
        ? ReadonlyAccount<TAccountAuthorizationRules>
        : TAccountAuthorizationRules,
      ...TRemainingAccounts,
    ]
  >;

export type MigrateInstructionData = { discriminator: number };

export type MigrateInstructionDataArgs = {};

export function getMigrateInstructionDataEncoder(): FixedSizeEncoder<MigrateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: MIGRATE_DISCRIMINATOR })
  );
}

export function getMigrateInstructionDataDecoder(): FixedSizeDecoder<MigrateInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getMigrateInstructionDataCodec(): FixedSizeCodec<
  MigrateInstructionDataArgs,
  MigrateInstructionData
> {
  return combineCodec(
    getMigrateInstructionDataEncoder(),
    getMigrateInstructionDataDecoder()
  );
}

export type MigrateAsyncInput<
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountToken extends string = string,
  TAccountTokenOwner extends string = string,
  TAccountMint extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountTokenRecord extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
  TAccountSplTokenProgram extends string = string,
  TAccountAuthorizationRulesProgram extends string = string,
  TAccountAuthorizationRules extends string = string,
> = {
  /** Metadata account */
  metadata?: Address<TAccountMetadata>;
  /** Edition account */
  edition?: Address<TAccountEdition>;
  /** Token account */
  token: Address<TAccountToken>;
  /** Token account owner */
  tokenOwner: Address<TAccountTokenOwner>;
  /** Mint account */
  mint: Address<TAccountMint>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** Update authority */
  authority: TransactionSigner<TAccountAuthority>;
  /** Collection metadata account */
  collectionMetadata: Address<TAccountCollectionMetadata>;
  /** Delegate record account */
  delegateRecord: Address<TAccountDelegateRecord>;
  /** Token record account */
  tokenRecord?: Address<TAccountTokenRecord>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instruction sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** SPL Token Program */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: Address<TAccountAuthorizationRulesProgram>;
  /** Token Authorization Rules account */
  authorizationRules?: Address<TAccountAuthorizationRules>;
};

export async function getMigrateInstructionAsync<
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountToken extends string,
  TAccountTokenOwner extends string,
  TAccountMint extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountDelegateRecord extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TAccountAuthorizationRulesProgram extends string,
  TAccountAuthorizationRules extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: MigrateAsyncInput<
    TAccountMetadata,
    TAccountEdition,
    TAccountToken,
    TAccountTokenOwner,
    TAccountMint,
    TAccountPayer,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountDelegateRecord,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MigrateInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountEdition,
    TAccountToken,
    TAccountTokenOwner,
    TAccountMint,
    TAccountPayer,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountDelegateRecord,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: true },
    token: { value: input.token ?? null, isWritable: true },
    tokenOwner: { value: input.tokenOwner ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: false,
    },
    delegateRecord: { value: input.delegateRecord ?? null, isWritable: false },
    tokenRecord: { value: input.tokenRecord ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    splTokenProgram: {
      value: input.splTokenProgram ?? null,
      isWritable: false,
    },
    authorizationRulesProgram: {
      value: input.authorizationRulesProgram ?? null,
      isWritable: false,
    },
    authorizationRules: {
      value: input.authorizationRules ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.metadata.value) {
    accounts.metadata.value = await findMetadataPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.edition.value) {
    accounts.edition.value = await findMasterEditionPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.tokenRecord.value) {
    accounts.tokenRecord.value = await findTokenRecordPda({
      mint: expectAddress(accounts.mint.value),
      token: expectAddress(accounts.token.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.splTokenProgram.value) {
    accounts.splTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.authorizationRulesProgram.value) {
    if (accounts.authorizationRules.value) {
      accounts.authorizationRulesProgram.value =
        'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg' as Address<'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'>;
    }
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.tokenOwner),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.delegateRecord),
      getAccountMeta(accounts.tokenRecord),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.sysvarInstructions),
      getAccountMeta(accounts.splTokenProgram),
      getAccountMeta(accounts.authorizationRulesProgram),
      getAccountMeta(accounts.authorizationRules),
    ],
    programAddress,
    data: getMigrateInstructionDataEncoder().encode({}),
  } as MigrateInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountEdition,
    TAccountToken,
    TAccountTokenOwner,
    TAccountMint,
    TAccountPayer,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountDelegateRecord,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >;

  return instruction;
}

export type MigrateInput<
  TAccountMetadata extends string = string,
  TAccountEdition extends string = string,
  TAccountToken extends string = string,
  TAccountTokenOwner extends string = string,
  TAccountMint extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountTokenRecord extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
  TAccountSplTokenProgram extends string = string,
  TAccountAuthorizationRulesProgram extends string = string,
  TAccountAuthorizationRules extends string = string,
> = {
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Edition account */
  edition: Address<TAccountEdition>;
  /** Token account */
  token: Address<TAccountToken>;
  /** Token account owner */
  tokenOwner: Address<TAccountTokenOwner>;
  /** Mint account */
  mint: Address<TAccountMint>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
  /** Update authority */
  authority: TransactionSigner<TAccountAuthority>;
  /** Collection metadata account */
  collectionMetadata: Address<TAccountCollectionMetadata>;
  /** Delegate record account */
  delegateRecord: Address<TAccountDelegateRecord>;
  /** Token record account */
  tokenRecord: Address<TAccountTokenRecord>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Instruction sysvar account */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
  /** SPL Token Program */
  splTokenProgram?: Address<TAccountSplTokenProgram>;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: Address<TAccountAuthorizationRulesProgram>;
  /** Token Authorization Rules account */
  authorizationRules?: Address<TAccountAuthorizationRules>;
};

export function getMigrateInstruction<
  TAccountMetadata extends string,
  TAccountEdition extends string,
  TAccountToken extends string,
  TAccountTokenOwner extends string,
  TAccountMint extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountCollectionMetadata extends string,
  TAccountDelegateRecord extends string,
  TAccountTokenRecord extends string,
  TAccountSystemProgram extends string,
  TAccountSysvarInstructions extends string,
  TAccountSplTokenProgram extends string,
  TAccountAuthorizationRulesProgram extends string,
  TAccountAuthorizationRules extends string,
  TProgramAddress extends Address = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: MigrateInput<
    TAccountMetadata,
    TAccountEdition,
    TAccountToken,
    TAccountTokenOwner,
    TAccountMint,
    TAccountPayer,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountDelegateRecord,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >,
  config?: { programAddress?: TProgramAddress }
): MigrateInstruction<
  TProgramAddress,
  TAccountMetadata,
  TAccountEdition,
  TAccountToken,
  TAccountTokenOwner,
  TAccountMint,
  TAccountPayer,
  TAccountAuthority,
  TAccountCollectionMetadata,
  TAccountDelegateRecord,
  TAccountTokenRecord,
  TAccountSystemProgram,
  TAccountSysvarInstructions,
  TAccountSplTokenProgram,
  TAccountAuthorizationRulesProgram,
  TAccountAuthorizationRules
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    edition: { value: input.edition ?? null, isWritable: true },
    token: { value: input.token ?? null, isWritable: true },
    tokenOwner: { value: input.tokenOwner ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: false,
    },
    delegateRecord: { value: input.delegateRecord ?? null, isWritable: false },
    tokenRecord: { value: input.tokenRecord ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    splTokenProgram: {
      value: input.splTokenProgram ?? null,
      isWritable: false,
    },
    authorizationRulesProgram: {
      value: input.authorizationRulesProgram ?? null,
      isWritable: false,
    },
    authorizationRules: {
      value: input.authorizationRules ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.splTokenProgram.value) {
    accounts.splTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.authorizationRulesProgram.value) {
    if (accounts.authorizationRules.value) {
      accounts.authorizationRulesProgram.value =
        'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg' as Address<'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'>;
    }
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.edition),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.tokenOwner),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.delegateRecord),
      getAccountMeta(accounts.tokenRecord),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.sysvarInstructions),
      getAccountMeta(accounts.splTokenProgram),
      getAccountMeta(accounts.authorizationRulesProgram),
      getAccountMeta(accounts.authorizationRules),
    ],
    programAddress,
    data: getMigrateInstructionDataEncoder().encode({}),
  } as MigrateInstruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountEdition,
    TAccountToken,
    TAccountTokenOwner,
    TAccountMint,
    TAccountPayer,
    TAccountAuthority,
    TAccountCollectionMetadata,
    TAccountDelegateRecord,
    TAccountTokenRecord,
    TAccountSystemProgram,
    TAccountSysvarInstructions,
    TAccountSplTokenProgram,
    TAccountAuthorizationRulesProgram,
    TAccountAuthorizationRules
  >;

  return instruction;
}

export type ParsedMigrateInstruction<
  TProgram extends string = typeof MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Metadata account */
    metadata: TAccountMetas[0];
    /** Edition account */
    edition: TAccountMetas[1];
    /** Token account */
    token: TAccountMetas[2];
    /** Token account owner */
    tokenOwner: TAccountMetas[3];
    /** Mint account */
    mint: TAccountMetas[4];
    /** Payer */
    payer: TAccountMetas[5];
    /** Update authority */
    authority: TAccountMetas[6];
    /** Collection metadata account */
    collectionMetadata: TAccountMetas[7];
    /** Delegate record account */
    delegateRecord: TAccountMetas[8];
    /** Token record account */
    tokenRecord: TAccountMetas[9];
    /** System program */
    systemProgram: TAccountMetas[10];
    /** Instruction sysvar account */
    sysvarInstructions: TAccountMetas[11];
    /** SPL Token Program */
    splTokenProgram: TAccountMetas[12];
    /** Token Authorization Rules Program */
    authorizationRulesProgram?: TAccountMetas[13] | undefined;
    /** Token Authorization Rules account */
    authorizationRules?: TAccountMetas[14] | undefined;
  };
  data: MigrateInstructionData;
};

export function parseMigrateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMigrateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_TOKEN_METADATA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      edition: getNextAccount(),
      token: getNextAccount(),
      tokenOwner: getNextAccount(),
      mint: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextAccount(),
      collectionMetadata: getNextAccount(),
      delegateRecord: getNextAccount(),
      tokenRecord: getNextAccount(),
      systemProgram: getNextAccount(),
      sysvarInstructions: getNextAccount(),
      splTokenProgram: getNextAccount(),
      authorizationRulesProgram: getNextOptionalAccount(),
      authorizationRules: getNextOptionalAccount(),
    },
    data: getMigrateInstructionDataDecoder().decode(instruction.data),
  };
}
