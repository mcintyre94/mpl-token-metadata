/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getAssetDataDecoder,
  getAssetDataEncoder,
  getPrintSupplyDecoder,
  getPrintSupplyEncoder,
  type AssetData,
  type AssetDataArgs,
  type PrintSupply,
  type PrintSupplyArgs,
} from '.';

export type CreateArgs = {
  __kind: 'V1';
  assetData: AssetData;
  decimals: Option<number>;
  printSupply: Option<PrintSupply>;
};

export type CreateArgsArgs = {
  __kind: 'V1';
  assetData: AssetDataArgs;
  decimals: OptionOrNullable<number>;
  printSupply: OptionOrNullable<PrintSupplyArgs>;
};

export function getCreateArgsEncoder(): Encoder<CreateArgsArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      getStructEncoder([
        ['assetData', getAssetDataEncoder()],
        ['decimals', getOptionEncoder(getU8Encoder())],
        ['printSupply', getOptionEncoder(getPrintSupplyEncoder())],
      ]),
    ],
  ]);
}

export function getCreateArgsDecoder(): Decoder<CreateArgs> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        ['assetData', getAssetDataDecoder()],
        ['decimals', getOptionDecoder(getU8Decoder())],
        ['printSupply', getOptionDecoder(getPrintSupplyDecoder())],
      ]),
    ],
  ]);
}

export function getCreateArgsCodec(): Codec<CreateArgsArgs, CreateArgs> {
  return combineCodec(getCreateArgsEncoder(), getCreateArgsDecoder());
}

// Data Enum Helpers.
export function createArgs(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<CreateArgsArgs, '__kind', 'V1'>
): GetDiscriminatedUnionVariant<CreateArgsArgs, '__kind', 'V1'>;
export function createArgs<K extends CreateArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isCreateArgs<K extends CreateArgs['__kind']>(
  kind: K,
  value: CreateArgs
): value is CreateArgs & { __kind: K } {
  return value.__kind === kind;
}
