/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type LeafInfo = {
  leaf: ReadonlyUint8Array;
  proof: Array<ReadonlyUint8Array>;
};

export type LeafInfoArgs = LeafInfo;

export function getLeafInfoEncoder(): Encoder<LeafInfoArgs> {
  return getStructEncoder([
    ['leaf', fixEncoderSize(getBytesEncoder(), 32)],
    ['proof', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
  ]);
}

export function getLeafInfoDecoder(): Decoder<LeafInfo> {
  return getStructDecoder([
    ['leaf', fixDecoderSize(getBytesDecoder(), 32)],
    ['proof', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
  ]);
}

export function getLeafInfoCodec(): Codec<LeafInfoArgs, LeafInfo> {
  return combineCodec(getLeafInfoEncoder(), getLeafInfoDecoder());
}
