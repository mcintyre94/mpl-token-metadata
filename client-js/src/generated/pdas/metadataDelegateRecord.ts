/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  getAddressEncoder,
  getProgramDerivedAddress,
  getUtf8Encoder,
  type Address,
  type ProgramDerivedAddress,
} from '@solana/kit';
import {
  getMetadataDelegateRoleSeedEncoder,
  type MetadataDelegateRoleSeedArgs,
} from '../../hooked';

export type MetadataDelegateRecordSeeds = {
  /** The address of the mint account */
  mint: Address;
  /** The role of the metadata delegate */
  delegateRole: MetadataDelegateRoleSeedArgs;
  /** The address of the metadata's update authority */
  updateAuthority: Address;
  /** The address of the delegate authority */
  delegate: Address;
};

export async function findMetadataDelegateRecordPda(
  seeds: MetadataDelegateRecordSeeds,
  config: { programAddress?: Address | undefined } = {}
): Promise<ProgramDerivedAddress> {
  const {
    programAddress = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
  } = config;
  return await getProgramDerivedAddress({
    programAddress,
    seeds: [
      getUtf8Encoder().encode('metadata'),
      getAddressEncoder().encode(programAddress),
      getAddressEncoder().encode(seeds.mint),
      getMetadataDelegateRoleSeedEncoder().encode(seeds.delegateRole),
      getAddressEncoder().encode(seeds.updateAuthority),
      getAddressEncoder().encode(seeds.delegate),
    ],
  });
}
