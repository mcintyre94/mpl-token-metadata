/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedApproveCollectionAuthorityInstruction,
  type ParsedApproveUseAuthorityInstruction,
  type ParsedBubblegumSetCollectionSizeInstruction,
  type ParsedBurnEditionNftInstruction,
  type ParsedBurnNftInstruction,
  type ParsedBurnV1Instruction,
  type ParsedCloseAccountsInstruction,
  type ParsedCloseEscrowAccountInstruction,
  type ParsedCollectInstruction,
  type ParsedConvertMasterEditionV1ToV2Instruction,
  type ParsedCreateEscrowAccountInstruction,
  type ParsedCreateMasterEditionV3Instruction,
  type ParsedCreateMetadataAccountV3Instruction,
  type ParsedCreateV1Instruction,
  type ParsedDelegateAuthorityItemV1Instruction,
  type ParsedDelegateCollectionItemV1Instruction,
  type ParsedDelegateCollectionV1Instruction,
  type ParsedDelegateDataItemV1Instruction,
  type ParsedDelegateDataV1Instruction,
  type ParsedDelegateLockedTransferV1Instruction,
  type ParsedDelegatePrintDelegateV1Instruction,
  type ParsedDelegateProgrammableConfigItemV1Instruction,
  type ParsedDelegateProgrammableConfigV1Instruction,
  type ParsedDelegateSaleV1Instruction,
  type ParsedDelegateStakingV1Instruction,
  type ParsedDelegateStandardV1Instruction,
  type ParsedDelegateTransferV1Instruction,
  type ParsedDelegateUtilityV1Instruction,
  type ParsedDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction,
  type ParsedFreezeDelegatedAccountInstruction,
  type ParsedLockV1Instruction,
  type ParsedMigrateInstruction,
  type ParsedMintNewEditionFromMasterEditionViaTokenInstruction,
  type ParsedMintNewEditionFromMasterEditionViaVaultProxyInstruction,
  type ParsedMintV1Instruction,
  type ParsedPrintV1Instruction,
  type ParsedPrintV2Instruction,
  type ParsedPuffMetadataInstruction,
  type ParsedRemoveCreatorVerificationInstruction,
  type ParsedResizeInstruction,
  type ParsedRevokeAuthorityItemV1Instruction,
  type ParsedRevokeCollectionAuthorityInstruction,
  type ParsedRevokeCollectionItemV1Instruction,
  type ParsedRevokeCollectionV1Instruction,
  type ParsedRevokeDataItemV1Instruction,
  type ParsedRevokeDataV1Instruction,
  type ParsedRevokeLockedTransferV1Instruction,
  type ParsedRevokeMigrationV1Instruction,
  type ParsedRevokePrintDelegateV1Instruction,
  type ParsedRevokeProgrammableConfigItemV1Instruction,
  type ParsedRevokeProgrammableConfigV1Instruction,
  type ParsedRevokeSaleV1Instruction,
  type ParsedRevokeStakingV1Instruction,
  type ParsedRevokeStandardV1Instruction,
  type ParsedRevokeTransferV1Instruction,
  type ParsedRevokeUseAuthorityInstruction,
  type ParsedRevokeUtilityV1Instruction,
  type ParsedSetAndVerifyCollectionInstruction,
  type ParsedSetAndVerifySizedCollectionItemInstruction,
  type ParsedSetCollectionSizeInstruction,
  type ParsedSetTokenStandardInstruction,
  type ParsedSignMetadataInstruction,
  type ParsedThawDelegatedAccountInstruction,
  type ParsedTransferOutOfEscrowInstruction,
  type ParsedTransferV1Instruction,
  type ParsedUnlockV1Instruction,
  type ParsedUnverifyCollectionInstruction,
  type ParsedUnverifyCollectionV1Instruction,
  type ParsedUnverifyCreatorV1Instruction,
  type ParsedUnverifySizedCollectionItemInstruction,
  type ParsedUpdateAsAuthorityItemDelegateV2Instruction,
  type ParsedUpdateAsCollectionDelegateV2Instruction,
  type ParsedUpdateAsCollectionItemDelegateV2Instruction,
  type ParsedUpdateAsDataDelegateV2Instruction,
  type ParsedUpdateAsDataItemDelegateV2Instruction,
  type ParsedUpdateAsProgrammableConfigDelegateV2Instruction,
  type ParsedUpdateAsProgrammableConfigItemDelegateV2Instruction,
  type ParsedUpdateAsUpdateAuthorityV2Instruction,
  type ParsedUpdateMetadataAccountV2Instruction,
  type ParsedUpdatePrimarySaleHappenedViaTokenInstruction,
  type ParsedUpdateV1Instruction,
  type ParsedUseV1Instruction,
  type ParsedUtilizeInstruction,
  type ParsedVerifyCollectionInstruction,
  type ParsedVerifyCollectionV1Instruction,
  type ParsedVerifyCreatorV1Instruction,
  type ParsedVerifySizedCollectionItemInstruction,
} from '../instructions';
import { Key, getKeyEncoder } from '../types';

export const MPL_TOKEN_METADATA_PROGRAM_ADDRESS =
  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;

export enum MplTokenMetadataAccount {
  CollectionAuthorityRecord,
  MetadataDelegateRecord,
  HolderDelegateRecord,
  Edition,
  EditionMarker,
  EditionMarkerV2,
  TokenOwnedEscrow,
  MasterEdition,
  DeprecatedMasterEditionV1,
  Metadata,
  TokenRecord,
  UseAuthorityRecord,
}

export function identifyMplTokenMetadataAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MplTokenMetadataAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      getKeyEncoder().encode(Key.CollectionAuthorityRecord),
      0
    )
  ) {
    return MplTokenMetadataAccount.CollectionAuthorityRecord;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.EditionV1), 0)) {
    return MplTokenMetadataAccount.Edition;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.EditionMarker), 0)) {
    return MplTokenMetadataAccount.EditionMarker;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.TokenOwnedEscrow), 0)) {
    return MplTokenMetadataAccount.TokenOwnedEscrow;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.MasterEditionV2), 0)) {
    return MplTokenMetadataAccount.MasterEdition;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.MasterEditionV1), 0)) {
    return MplTokenMetadataAccount.DeprecatedMasterEditionV1;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.MetadataV1), 0)) {
    return MplTokenMetadataAccount.Metadata;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.TokenRecord), 0)) {
    return MplTokenMetadataAccount.TokenRecord;
  }
  if (containsBytes(data, getKeyEncoder().encode(Key.UseAuthorityRecord), 0)) {
    return MplTokenMetadataAccount.UseAuthorityRecord;
  }
  throw new Error(
    'The provided account could not be identified as a mplTokenMetadata account.'
  );
}

export enum MplTokenMetadataInstruction {
  DeprecatedMintNewEditionFromMasterEditionViaPrintingToken,
  UpdatePrimarySaleHappenedViaToken,
  SignMetadata,
  MintNewEditionFromMasterEditionViaToken,
  ConvertMasterEditionV1ToV2,
  MintNewEditionFromMasterEditionViaVaultProxy,
  PuffMetadata,
  UpdateMetadataAccountV2,
  CreateMasterEditionV3,
  VerifyCollection,
  Utilize,
  ApproveUseAuthority,
  RevokeUseAuthority,
  UnverifyCollection,
  ApproveCollectionAuthority,
  RevokeCollectionAuthority,
  SetAndVerifyCollection,
  FreezeDelegatedAccount,
  ThawDelegatedAccount,
  RemoveCreatorVerification,
  BurnNft,
  VerifySizedCollectionItem,
  UnverifySizedCollectionItem,
  SetAndVerifySizedCollectionItem,
  CreateMetadataAccountV3,
  SetCollectionSize,
  SetTokenStandard,
  BubblegumSetCollectionSize,
  BurnEditionNft,
  CreateEscrowAccount,
  CloseEscrowAccount,
  TransferOutOfEscrow,
  BurnV1,
  CreateV1,
  MintV1,
  DelegateCollectionV1,
  DelegateSaleV1,
  DelegateTransferV1,
  DelegateDataV1,
  DelegateUtilityV1,
  DelegateStakingV1,
  DelegateStandardV1,
  DelegateLockedTransferV1,
  DelegateProgrammableConfigV1,
  DelegateAuthorityItemV1,
  DelegateDataItemV1,
  DelegateCollectionItemV1,
  DelegateProgrammableConfigItemV1,
  DelegatePrintDelegateV1,
  RevokeCollectionV1,
  RevokeSaleV1,
  RevokeTransferV1,
  RevokeDataV1,
  RevokeUtilityV1,
  RevokeStakingV1,
  RevokeStandardV1,
  RevokeLockedTransferV1,
  RevokeProgrammableConfigV1,
  RevokeMigrationV1,
  RevokeAuthorityItemV1,
  RevokeDataItemV1,
  RevokeCollectionItemV1,
  RevokeProgrammableConfigItemV1,
  RevokePrintDelegateV1,
  LockV1,
  UnlockV1,
  Migrate,
  TransferV1,
  UpdateV1,
  UpdateAsUpdateAuthorityV2,
  UpdateAsAuthorityItemDelegateV2,
  UpdateAsCollectionDelegateV2,
  UpdateAsDataDelegateV2,
  UpdateAsProgrammableConfigDelegateV2,
  UpdateAsDataItemDelegateV2,
  UpdateAsCollectionItemDelegateV2,
  UpdateAsProgrammableConfigItemDelegateV2,
  UseV1,
  VerifyCreatorV1,
  VerifyCollectionV1,
  UnverifyCreatorV1,
  UnverifyCollectionV1,
  Collect,
  PrintV1,
  PrintV2,
  Resize,
  CloseAccounts,
}

export function identifyMplTokenMetadataInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MplTokenMetadataInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return MplTokenMetadataInstruction.DeprecatedMintNewEditionFromMasterEditionViaPrintingToken;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return MplTokenMetadataInstruction.UpdatePrimarySaleHappenedViaToken;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return MplTokenMetadataInstruction.SignMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return MplTokenMetadataInstruction.MintNewEditionFromMasterEditionViaToken;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return MplTokenMetadataInstruction.ConvertMasterEditionV1ToV2;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return MplTokenMetadataInstruction.MintNewEditionFromMasterEditionViaVaultProxy;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return MplTokenMetadataInstruction.PuffMetadata;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return MplTokenMetadataInstruction.UpdateMetadataAccountV2;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return MplTokenMetadataInstruction.CreateMasterEditionV3;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return MplTokenMetadataInstruction.VerifyCollection;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return MplTokenMetadataInstruction.Utilize;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return MplTokenMetadataInstruction.ApproveUseAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return MplTokenMetadataInstruction.RevokeUseAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return MplTokenMetadataInstruction.UnverifyCollection;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return MplTokenMetadataInstruction.ApproveCollectionAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return MplTokenMetadataInstruction.RevokeCollectionAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return MplTokenMetadataInstruction.SetAndVerifyCollection;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return MplTokenMetadataInstruction.FreezeDelegatedAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(27), 0)) {
    return MplTokenMetadataInstruction.ThawDelegatedAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(28), 0)) {
    return MplTokenMetadataInstruction.RemoveCreatorVerification;
  }
  if (containsBytes(data, getU8Encoder().encode(29), 0)) {
    return MplTokenMetadataInstruction.BurnNft;
  }
  if (containsBytes(data, getU8Encoder().encode(30), 0)) {
    return MplTokenMetadataInstruction.VerifySizedCollectionItem;
  }
  if (containsBytes(data, getU8Encoder().encode(31), 0)) {
    return MplTokenMetadataInstruction.UnverifySizedCollectionItem;
  }
  if (containsBytes(data, getU8Encoder().encode(32), 0)) {
    return MplTokenMetadataInstruction.SetAndVerifySizedCollectionItem;
  }
  if (containsBytes(data, getU8Encoder().encode(33), 0)) {
    return MplTokenMetadataInstruction.CreateMetadataAccountV3;
  }
  if (containsBytes(data, getU8Encoder().encode(34), 0)) {
    return MplTokenMetadataInstruction.SetCollectionSize;
  }
  if (containsBytes(data, getU8Encoder().encode(35), 0)) {
    return MplTokenMetadataInstruction.SetTokenStandard;
  }
  if (containsBytes(data, getU8Encoder().encode(36), 0)) {
    return MplTokenMetadataInstruction.BubblegumSetCollectionSize;
  }
  if (containsBytes(data, getU8Encoder().encode(37), 0)) {
    return MplTokenMetadataInstruction.BurnEditionNft;
  }
  if (containsBytes(data, getU8Encoder().encode(38), 0)) {
    return MplTokenMetadataInstruction.CreateEscrowAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(39), 0)) {
    return MplTokenMetadataInstruction.CloseEscrowAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(40), 0)) {
    return MplTokenMetadataInstruction.TransferOutOfEscrow;
  }
  if (containsBytes(data, getU8Encoder().encode(41), 0)) {
    return MplTokenMetadataInstruction.BurnV1;
  }
  if (containsBytes(data, getU8Encoder().encode(42), 0)) {
    return MplTokenMetadataInstruction.CreateV1;
  }
  if (containsBytes(data, getU8Encoder().encode(43), 0)) {
    return MplTokenMetadataInstruction.MintV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateCollectionV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateSaleV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateTransferV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateDataV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateUtilityV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateStakingV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateStandardV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateLockedTransferV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateProgrammableConfigV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateAuthorityItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateDataItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateCollectionItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegateProgrammableConfigItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.DelegatePrintDelegateV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeCollectionV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeSaleV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeTransferV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeDataV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeUtilityV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeStakingV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeStandardV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeLockedTransferV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeProgrammableConfigV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeMigrationV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeAuthorityItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeDataItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeCollectionItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokeProgrammableConfigItemV1;
  }
  if (containsBytes(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.RevokePrintDelegateV1;
  }
  if (containsBytes(data, getU8Encoder().encode(46), 0)) {
    return MplTokenMetadataInstruction.LockV1;
  }
  if (containsBytes(data, getU8Encoder().encode(47), 0)) {
    return MplTokenMetadataInstruction.UnlockV1;
  }
  if (containsBytes(data, getU8Encoder().encode(48), 0)) {
    return MplTokenMetadataInstruction.Migrate;
  }
  if (containsBytes(data, getU8Encoder().encode(49), 0)) {
    return MplTokenMetadataInstruction.TransferV1;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateV1;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsUpdateAuthorityV2;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsAuthorityItemDelegateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsCollectionDelegateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsDataDelegateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsProgrammableConfigDelegateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsDataItemDelegateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsCollectionItemDelegateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.UpdateAsProgrammableConfigItemDelegateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(51), 0)) {
    return MplTokenMetadataInstruction.UseV1;
  }
  if (containsBytes(data, getU8Encoder().encode(52), 0)) {
    return MplTokenMetadataInstruction.VerifyCreatorV1;
  }
  if (containsBytes(data, getU8Encoder().encode(52), 0)) {
    return MplTokenMetadataInstruction.VerifyCollectionV1;
  }
  if (containsBytes(data, getU8Encoder().encode(53), 0)) {
    return MplTokenMetadataInstruction.UnverifyCreatorV1;
  }
  if (containsBytes(data, getU8Encoder().encode(53), 0)) {
    return MplTokenMetadataInstruction.UnverifyCollectionV1;
  }
  if (containsBytes(data, getU8Encoder().encode(54), 0)) {
    return MplTokenMetadataInstruction.Collect;
  }
  if (containsBytes(data, getU8Encoder().encode(55), 0)) {
    return MplTokenMetadataInstruction.PrintV1;
  }
  if (containsBytes(data, getU8Encoder().encode(55), 0)) {
    return MplTokenMetadataInstruction.PrintV2;
  }
  if (containsBytes(data, getU8Encoder().encode(56), 0)) {
    return MplTokenMetadataInstruction.Resize;
  }
  if (containsBytes(data, getU8Encoder().encode(57), 0)) {
    return MplTokenMetadataInstruction.CloseAccounts;
  }
  throw new Error(
    'The provided instruction could not be identified as a mplTokenMetadata instruction.'
  );
}

export type ParsedMplTokenMetadataInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
> =
  | ({
      instructionType: MplTokenMetadataInstruction.DeprecatedMintNewEditionFromMasterEditionViaPrintingToken;
    } & ParsedDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdatePrimarySaleHappenedViaToken;
    } & ParsedUpdatePrimarySaleHappenedViaTokenInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.SignMetadata;
    } & ParsedSignMetadataInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.MintNewEditionFromMasterEditionViaToken;
    } & ParsedMintNewEditionFromMasterEditionViaTokenInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.ConvertMasterEditionV1ToV2;
    } & ParsedConvertMasterEditionV1ToV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.MintNewEditionFromMasterEditionViaVaultProxy;
    } & ParsedMintNewEditionFromMasterEditionViaVaultProxyInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.PuffMetadata;
    } & ParsedPuffMetadataInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateMetadataAccountV2;
    } & ParsedUpdateMetadataAccountV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.CreateMasterEditionV3;
    } & ParsedCreateMasterEditionV3Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.VerifyCollection;
    } & ParsedVerifyCollectionInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.Utilize;
    } & ParsedUtilizeInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.ApproveUseAuthority;
    } & ParsedApproveUseAuthorityInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeUseAuthority;
    } & ParsedRevokeUseAuthorityInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UnverifyCollection;
    } & ParsedUnverifyCollectionInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.ApproveCollectionAuthority;
    } & ParsedApproveCollectionAuthorityInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeCollectionAuthority;
    } & ParsedRevokeCollectionAuthorityInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.SetAndVerifyCollection;
    } & ParsedSetAndVerifyCollectionInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.FreezeDelegatedAccount;
    } & ParsedFreezeDelegatedAccountInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.ThawDelegatedAccount;
    } & ParsedThawDelegatedAccountInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RemoveCreatorVerification;
    } & ParsedRemoveCreatorVerificationInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.BurnNft;
    } & ParsedBurnNftInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.VerifySizedCollectionItem;
    } & ParsedVerifySizedCollectionItemInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UnverifySizedCollectionItem;
    } & ParsedUnverifySizedCollectionItemInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.SetAndVerifySizedCollectionItem;
    } & ParsedSetAndVerifySizedCollectionItemInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.CreateMetadataAccountV3;
    } & ParsedCreateMetadataAccountV3Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.SetCollectionSize;
    } & ParsedSetCollectionSizeInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.SetTokenStandard;
    } & ParsedSetTokenStandardInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.BubblegumSetCollectionSize;
    } & ParsedBubblegumSetCollectionSizeInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.BurnEditionNft;
    } & ParsedBurnEditionNftInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.CreateEscrowAccount;
    } & ParsedCreateEscrowAccountInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.CloseEscrowAccount;
    } & ParsedCloseEscrowAccountInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.TransferOutOfEscrow;
    } & ParsedTransferOutOfEscrowInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.BurnV1;
    } & ParsedBurnV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.CreateV1;
    } & ParsedCreateV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.MintV1;
    } & ParsedMintV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateCollectionV1;
    } & ParsedDelegateCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateSaleV1;
    } & ParsedDelegateSaleV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateTransferV1;
    } & ParsedDelegateTransferV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateDataV1;
    } & ParsedDelegateDataV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateUtilityV1;
    } & ParsedDelegateUtilityV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateStakingV1;
    } & ParsedDelegateStakingV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateStandardV1;
    } & ParsedDelegateStandardV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateLockedTransferV1;
    } & ParsedDelegateLockedTransferV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateProgrammableConfigV1;
    } & ParsedDelegateProgrammableConfigV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateAuthorityItemV1;
    } & ParsedDelegateAuthorityItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateDataItemV1;
    } & ParsedDelegateDataItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateCollectionItemV1;
    } & ParsedDelegateCollectionItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegateProgrammableConfigItemV1;
    } & ParsedDelegateProgrammableConfigItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.DelegatePrintDelegateV1;
    } & ParsedDelegatePrintDelegateV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeCollectionV1;
    } & ParsedRevokeCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeSaleV1;
    } & ParsedRevokeSaleV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeTransferV1;
    } & ParsedRevokeTransferV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeDataV1;
    } & ParsedRevokeDataV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeUtilityV1;
    } & ParsedRevokeUtilityV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeStakingV1;
    } & ParsedRevokeStakingV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeStandardV1;
    } & ParsedRevokeStandardV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeLockedTransferV1;
    } & ParsedRevokeLockedTransferV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeProgrammableConfigV1;
    } & ParsedRevokeProgrammableConfigV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeMigrationV1;
    } & ParsedRevokeMigrationV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeAuthorityItemV1;
    } & ParsedRevokeAuthorityItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeDataItemV1;
    } & ParsedRevokeDataItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeCollectionItemV1;
    } & ParsedRevokeCollectionItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokeProgrammableConfigItemV1;
    } & ParsedRevokeProgrammableConfigItemV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.RevokePrintDelegateV1;
    } & ParsedRevokePrintDelegateV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.LockV1;
    } & ParsedLockV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UnlockV1;
    } & ParsedUnlockV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.Migrate;
    } & ParsedMigrateInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.TransferV1;
    } & ParsedTransferV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateV1;
    } & ParsedUpdateV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsUpdateAuthorityV2;
    } & ParsedUpdateAsUpdateAuthorityV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsAuthorityItemDelegateV2;
    } & ParsedUpdateAsAuthorityItemDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsCollectionDelegateV2;
    } & ParsedUpdateAsCollectionDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsDataDelegateV2;
    } & ParsedUpdateAsDataDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsProgrammableConfigDelegateV2;
    } & ParsedUpdateAsProgrammableConfigDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsDataItemDelegateV2;
    } & ParsedUpdateAsDataItemDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsCollectionItemDelegateV2;
    } & ParsedUpdateAsCollectionItemDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UpdateAsProgrammableConfigItemDelegateV2;
    } & ParsedUpdateAsProgrammableConfigItemDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UseV1;
    } & ParsedUseV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.VerifyCreatorV1;
    } & ParsedVerifyCreatorV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.VerifyCollectionV1;
    } & ParsedVerifyCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UnverifyCreatorV1;
    } & ParsedUnverifyCreatorV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.UnverifyCollectionV1;
    } & ParsedUnverifyCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.Collect;
    } & ParsedCollectInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.PrintV1;
    } & ParsedPrintV1Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.PrintV2;
    } & ParsedPrintV2Instruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.Resize;
    } & ParsedResizeInstruction<TProgram>)
  | ({
      instructionType: MplTokenMetadataInstruction.CloseAccounts;
    } & ParsedCloseAccountsInstruction<TProgram>);
