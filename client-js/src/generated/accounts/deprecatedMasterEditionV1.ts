/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  DeprecatedMasterEditionV1Seeds,
  findDeprecatedMasterEditionV1Pda,
} from '../pdas';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type DeprecatedMasterEditionV1 = {
  key: Key;
  supply: bigint;
  maxSupply: Option<bigint>;
  printingMint: Address;
  oneTimePrintingAuthorizationMint: Address;
};

export type DeprecatedMasterEditionV1Args = {
  key: KeyArgs;
  supply: number | bigint;
  maxSupply: OptionOrNullable<number | bigint>;
  printingMint: Address;
  oneTimePrintingAuthorizationMint: Address;
};

export function getDeprecatedMasterEditionV1Encoder(): Encoder<DeprecatedMasterEditionV1Args> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['supply', getU64Encoder()],
    ['maxSupply', getOptionEncoder(getU64Encoder())],
    ['printingMint', getAddressEncoder()],
    ['oneTimePrintingAuthorizationMint', getAddressEncoder()],
  ]);
}

export function getDeprecatedMasterEditionV1Decoder(): Decoder<DeprecatedMasterEditionV1> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['supply', getU64Decoder()],
    ['maxSupply', getOptionDecoder(getU64Decoder())],
    ['printingMint', getAddressDecoder()],
    ['oneTimePrintingAuthorizationMint', getAddressDecoder()],
  ]);
}

export function getDeprecatedMasterEditionV1Codec(): Codec<
  DeprecatedMasterEditionV1Args,
  DeprecatedMasterEditionV1
> {
  return combineCodec(
    getDeprecatedMasterEditionV1Encoder(),
    getDeprecatedMasterEditionV1Decoder()
  );
}

export function decodeDeprecatedMasterEditionV1<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DeprecatedMasterEditionV1, TAddress>;
export function decodeDeprecatedMasterEditionV1<
  TAddress extends string = string,
>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DeprecatedMasterEditionV1, TAddress>;
export function decodeDeprecatedMasterEditionV1<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<DeprecatedMasterEditionV1, TAddress>
  | MaybeAccount<DeprecatedMasterEditionV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDeprecatedMasterEditionV1Decoder()
  );
}

export async function fetchDeprecatedMasterEditionV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DeprecatedMasterEditionV1, TAddress>> {
  const maybeAccount = await fetchMaybeDeprecatedMasterEditionV1(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDeprecatedMasterEditionV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DeprecatedMasterEditionV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDeprecatedMasterEditionV1(maybeAccount);
}

export async function fetchAllDeprecatedMasterEditionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DeprecatedMasterEditionV1>[]> {
  const maybeAccounts = await fetchAllMaybeDeprecatedMasterEditionV1(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDeprecatedMasterEditionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DeprecatedMasterEditionV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDeprecatedMasterEditionV1(maybeAccount)
  );
}

export async function fetchDeprecatedMasterEditionV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: DeprecatedMasterEditionV1Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<DeprecatedMasterEditionV1>> {
  const maybeAccount = await fetchMaybeDeprecatedMasterEditionV1FromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDeprecatedMasterEditionV1FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: DeprecatedMasterEditionV1Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<DeprecatedMasterEditionV1>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findDeprecatedMasterEditionV1Pda(seeds, {
    programAddress,
  });
  return await fetchMaybeDeprecatedMasterEditionV1(rpc, address, fetchConfig);
}
