/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type Uninitialized = {};

export type UninitializedArgs = Uninitialized;

export function getUninitializedEncoder(): FixedSizeEncoder<UninitializedArgs> {
  return getStructEncoder([]);
}

export function getUninitializedDecoder(): FixedSizeDecoder<Uninitialized> {
  return getStructDecoder([]);
}

export function getUninitializedCodec(): FixedSizeCodec<
  UninitializedArgs,
  Uninitialized
> {
  return combineCodec(getUninitializedEncoder(), getUninitializedDecoder());
}

export function decodeUninitialized<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Uninitialized, TAddress>;
export function decodeUninitialized<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Uninitialized, TAddress>;
export function decodeUninitialized<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Uninitialized, TAddress> | MaybeAccount<Uninitialized, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUninitializedDecoder()
  );
}

export async function fetchUninitialized<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Uninitialized, TAddress>> {
  const maybeAccount = await fetchMaybeUninitialized(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUninitialized<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Uninitialized, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUninitialized(maybeAccount);
}

export async function fetchAllUninitialized(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Uninitialized>[]> {
  const maybeAccounts = await fetchAllMaybeUninitialized(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUninitialized(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Uninitialized>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUninitialized(maybeAccount));
}

export function getUninitializedSize(): number {
  return 0;
}
